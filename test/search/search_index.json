{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome!!! Welcome to Delinea's Partner training on Secret Server Advanced!!! Secret Server advanced Lab This lab will be a sequel to the Secret Server Training Lab where the thylab.local domain has been fully configured. This lab is emulating a scenario in which an organisation (thylab.local) has merged with a second organisation (greensafe.lab domain) and the administrators for the first organisation need the ability to control the second AD using Secret Server. Below is a diagram of the two organisation as it has been build in the lab infrastructure. This lab will highlight the following topics: Installing RabbitMQ as Site Connector Use of Sites and Distributed Engines Discovery of the second site Proxying SSH and RDP sessions Secrets Manipulation using folders Use of Teams and lists Hooks in secrets Custom Discovery Custom Remote Password Changer Disaster Recovery (on-prem to on-prem) Skytap This workshop runs from a Skytap environment in the EMEA region. To present you with a basic set of how to use the environment, please read this small guide.. Access to your environment You should have received an email that you have been invited to an online training session. Click the link as you see it mentioning in the email. You may be asked to provided an extra password to login to your ask your training for that password.... Welcome to the world of security :) Starting your environment Once in your environment you will ss in the top right corner a \"play\" menu. Is your environment has not started, click the \"Play\" button. It will take approx 5-10 minutes for the environment is running. Check your environment After all VMs have started, the screenshot is an example, click on the VM that is mentioned in the lab. This will open the VM in a new browser tab so you can interact with the VM. Another option is to use the RDP link. This will download an RDP file that you can open in your RDP application like MS Terminal Services. This also works for Linux based machine. Working with your environment Once you have the VM open in a Browser window, you will get the Skytap Toolbar (click the arrow if you don't see it or want to hide it). From left to right: The two screens icon; clicking this icon provides the possibility to switch consoles between VMs The \"pause\"/ \"stop\" / \"power\" button; Resp. suspend, stop and poweroff/on the current VM Ctrl-Alt-Del button; send the Ctrl-Alt-Del command to the VM Keybord (EN) icon; switch between keyboard layouts. The VMs are built on EN-UK layout! Keys icon; any password that have been defined, you can use the button to insert the password Clipboard icon; exchange clipboard info between the VM and the machine you are working on The screen \"diagonal\" icon; Go full screen for the current VM Different screensizes icon; resize the screen to presetted sizes The \"Wifi\" icon; connection strength Support to your environment Your instructor can help you \"remotely\". He/she is able to connect to your environment and discuss together where the issue is. When he/she connects to your environment the mouse movements are seen on your screen. Don't be scared it is not a virus, it's your instructor!!! \\ \\ \\ HAVE FUN!!!!\\ \\","title":"Home"},{"location":"#welcome","text":"Welcome to Delinea's Partner training on Secret Server Advanced!!!","title":"Welcome!!!"},{"location":"#secret-server-advanced-lab","text":"This lab will be a sequel to the Secret Server Training Lab where the thylab.local domain has been fully configured. This lab is emulating a scenario in which an organisation (thylab.local) has merged with a second organisation (greensafe.lab domain) and the administrators for the first organisation need the ability to control the second AD using Secret Server. Below is a diagram of the two organisation as it has been build in the lab infrastructure. This lab will highlight the following topics: Installing RabbitMQ as Site Connector Use of Sites and Distributed Engines Discovery of the second site Proxying SSH and RDP sessions Secrets Manipulation using folders Use of Teams and lists Hooks in secrets Custom Discovery Custom Remote Password Changer Disaster Recovery (on-prem to on-prem)","title":"Secret Server advanced Lab"},{"location":"#skytap","text":"This workshop runs from a Skytap environment in the EMEA region. To present you with a basic set of how to use the environment, please read this small guide..","title":"Skytap"},{"location":"#access-to-your-environment","text":"You should have received an email that you have been invited to an online training session. Click the link as you see it mentioning in the email. You may be asked to provided an extra password to login to your ask your training for that password.... Welcome to the world of security :)","title":"Access to your environment"},{"location":"#starting-your-environment","text":"Once in your environment you will ss in the top right corner a \"play\" menu. Is your environment has not started, click the \"Play\" button. It will take approx 5-10 minutes for the environment is running.","title":"Starting your environment"},{"location":"#check-your-environment","text":"After all VMs have started, the screenshot is an example, click on the VM that is mentioned in the lab. This will open the VM in a new browser tab so you can interact with the VM. Another option is to use the RDP link. This will download an RDP file that you can open in your RDP application like MS Terminal Services. This also works for Linux based machine.","title":"Check your environment"},{"location":"#working-with-your-environment","text":"Once you have the VM open in a Browser window, you will get the Skytap Toolbar (click the arrow if you don't see it or want to hide it). From left to right: The two screens icon; clicking this icon provides the possibility to switch consoles between VMs The \"pause\"/ \"stop\" / \"power\" button; Resp. suspend, stop and poweroff/on the current VM Ctrl-Alt-Del button; send the Ctrl-Alt-Del command to the VM Keybord (EN) icon; switch between keyboard layouts. The VMs are built on EN-UK layout! Keys icon; any password that have been defined, you can use the button to insert the password Clipboard icon; exchange clipboard info between the VM and the machine you are working on The screen \"diagonal\" icon; Go full screen for the current VM Different screensizes icon; resize the screen to presetted sizes The \"Wifi\" icon; connection strength","title":"Working with your environment"},{"location":"#support-to-your-environment","text":"Your instructor can help you \"remotely\". He/she is able to connect to your environment and discuss together where the issue is. When he/she connects to your environment the mouse movements are seen on your screen. Don't be scared it is not a virus, it's your instructor!!! \\ \\ \\","title":"Support to your environment"},{"location":"lab1/lab1/","text":"Configure Site Connector A site Connector is what binds the Secret Server instance with its Distributed Engine(s). The Site Connector is using the message queueing mechanism to make sure jobs and results are exchanged in a modular fashion between the DEs and Secret Server. This also makes it possible to implement Secret Server as a High Availability solution. The supported two Message Queueing (MQ) mechanisms are MemoryMQ and Rabbit MQ. The first one is suitable for very small or testing/demo installations. The problem with this MQ is that it runs in the memory of the Secret Server and is therefore limited. It can not be clustered is one of its limitations. The other solution, highly recommended, is using RabbitMQ . This MQ is a dedicated instance that is specially built for the task and seen as one of the popular open source MQ. Installation process high level: Configuration for the new Site Connector to be using RabbitMQ Install RabbitMQ using the RabbitMQ helper Configuration check on connectivity Create site and install Distributed Engine in one site Create Site and install Distributed Engine in second sites Configure Secret Server Open the SSPM and login as adm-training Open Secret Server at https://sspm.thylab.local/SecretServer Login as ss-admin with the password Delinea/4u You may be asked to reset the password. Use you own password as long as you remember it ;).. Navigate to Administrattion > Setup & System Maintenance > Distributed Engine Click Configure and Edit Use the following settings for the Site Connector Queue Type: RabbitMQ Name: rabbitmq Active: Checked SSL: Unchecked Host name: rabbitmq.thylab.local Port: 5672 Click Save Installation of RabbitMQ Open the RabbitMQ server and login as adm-training Open Chrome and open the URL https://thycoticdownloadsprod.blob.core.windows.net/ssintegrations/RabbitMQHelper/Delinea.RabbitMq.Helper.9.5.msi to download the RabbitMQ Helper Run the downloaded MSI file Open Secret Server at https://sspm.thylab.local/SecretServer Login as ss-admin with the password you set (this will log you out of the SSPM Secret Server UI if you refresh that browser on the SSPM server) Navigate to Administration >> > Setup & System Maintenance > Distributed Engine Click Configure Click View Credentials . Keep this open as it needed in the next steps Back at the RabbitMQ server, open Windows Explorer Navigate to %PROGRAMFILES% > Delinea Software Ltd > RabbitMq Helper and run Delinea.RabbitMq.Helper.exe This will open a PowerShell command line Copy these lines into the PowerShell session: $cred = Get-Credential -Message \"Enter the initial RabbitMq user username and password\" ; #if you don't want to be prompted you can hardcode your credential in the script #$password = ConvertTo-SecureString \u201cPlainTextPassword\u201d -AsPlainText -Force #$cred = New-Object System.Management.Automation.PSCredential (\u201cCustomUserName\u201d, $password) Install-Connector ` -Credential $cred ` -UseDelineaMirror -Verbose Note This script assumes your environment has an internet connection. If not, please check https://thycotic.github.io/rabbitmq-helper/installation/ for you Scenario. Hit Enter to execute the lines The user name and the password are provided by the Secret Server as shown after clicking View Credentials Copy the username and password in the Messagebox (you can click them and a popup box at the bottom of the screen will show telling it copied respectively the username and password) and click OK When warnings are given on Agree on Licenses , type Y and Enter This will Download, install and Configure RabbitMQ on the machine. The process takes approx. 5 minutes The RabbitMQ Management webpage should open of RabbitMQ (just accept the IE11 settings and proceed by clicking the OK button). This means RabbitMQ has been installed and configured. You can close Internet Explorer as we don't need it. Also close the Powershell commandline. Back in your Secret Server UI (on RabbitMQ), click OK to close the Site Connector Credentials screen Click Validate , next to validated to make sure the RabbitMQ is correctly installed In the next screen click Validate Click Save Click Skip this Step and click OK on the Confirm Skipping Engine Download warning If no errors have been detected, you will be presented with the Site screen configuration Add thylab.local site In the Site screen, click the Add Site button Name the site thylab.local Set the Site Connector to rabbitmq Set the Engine callback Interval to 30 (seconds). This is just for testing/demoing purpose. In production this would be 5 minutes, depending on the organization and the jobs that need to be run in the site. Click Add SIte ** First Distributed Engine (DE) Navigate to Administrattion > Setup & System Maintenance > Distributed Engine and click the Add Engine button. In the next screen make sure that: Processor Architecture is 64-bit Preconfigured Site: thylab.local Click Download Now After the download, goto the Downloads directory using Windows Explorer and Extract the download ZIP file (Right-click the file and Extract...) When the extraction has been done, open the extract folder and run the setup.exe (no interaction is needed). On the UAC, click Yes Close the Windows Explorer screen and return to the Secret Server UI In Site: thylab.local there should be a amber \"warning\" of 1 Engine Pending Expand the thylab.local site and move the mouse on top of the RabbitMQ.thylab.local server On the right side of that DE, click the three dots and select Activate Click OK in the confirmation message. This will now, if all configured correct, will have two green check marks. NOTE You may have to refresh your browser to see the two green checks Close the Browser screen and logout of the server as we are ready for now on this server This concludes this part of the lab","title":"Configure Site Connector"},{"location":"lab1/lab1/#configure-site-connector","text":"A site Connector is what binds the Secret Server instance with its Distributed Engine(s). The Site Connector is using the message queueing mechanism to make sure jobs and results are exchanged in a modular fashion between the DEs and Secret Server. This also makes it possible to implement Secret Server as a High Availability solution. The supported two Message Queueing (MQ) mechanisms are MemoryMQ and Rabbit MQ. The first one is suitable for very small or testing/demo installations. The problem with this MQ is that it runs in the memory of the Secret Server and is therefore limited. It can not be clustered is one of its limitations. The other solution, highly recommended, is using RabbitMQ . This MQ is a dedicated instance that is specially built for the task and seen as one of the popular open source MQ.","title":"Configure Site Connector"},{"location":"lab1/lab1/#installation-process-high-level","text":"Configuration for the new Site Connector to be using RabbitMQ Install RabbitMQ using the RabbitMQ helper Configuration check on connectivity Create site and install Distributed Engine in one site Create Site and install Distributed Engine in second sites","title":"Installation process high level:"},{"location":"lab1/lab1/#configure-secret-server","text":"Open the SSPM and login as adm-training Open Secret Server at https://sspm.thylab.local/SecretServer Login as ss-admin with the password Delinea/4u You may be asked to reset the password. Use you own password as long as you remember it ;).. Navigate to Administrattion > Setup & System Maintenance > Distributed Engine Click Configure and Edit Use the following settings for the Site Connector Queue Type: RabbitMQ Name: rabbitmq Active: Checked SSL: Unchecked Host name: rabbitmq.thylab.local Port: 5672 Click Save","title":"Configure Secret Server"},{"location":"lab1/lab1/#installation-of-rabbitmq","text":"Open the RabbitMQ server and login as adm-training Open Chrome and open the URL https://thycoticdownloadsprod.blob.core.windows.net/ssintegrations/RabbitMQHelper/Delinea.RabbitMq.Helper.9.5.msi to download the RabbitMQ Helper Run the downloaded MSI file Open Secret Server at https://sspm.thylab.local/SecretServer Login as ss-admin with the password you set (this will log you out of the SSPM Secret Server UI if you refresh that browser on the SSPM server) Navigate to Administration >> > Setup & System Maintenance > Distributed Engine Click Configure Click View Credentials . Keep this open as it needed in the next steps Back at the RabbitMQ server, open Windows Explorer Navigate to %PROGRAMFILES% > Delinea Software Ltd > RabbitMq Helper and run Delinea.RabbitMq.Helper.exe This will open a PowerShell command line Copy these lines into the PowerShell session: $cred = Get-Credential -Message \"Enter the initial RabbitMq user username and password\" ; #if you don't want to be prompted you can hardcode your credential in the script #$password = ConvertTo-SecureString \u201cPlainTextPassword\u201d -AsPlainText -Force #$cred = New-Object System.Management.Automation.PSCredential (\u201cCustomUserName\u201d, $password) Install-Connector ` -Credential $cred ` -UseDelineaMirror -Verbose Note This script assumes your environment has an internet connection. If not, please check https://thycotic.github.io/rabbitmq-helper/installation/ for you Scenario. Hit Enter to execute the lines The user name and the password are provided by the Secret Server as shown after clicking View Credentials Copy the username and password in the Messagebox (you can click them and a popup box at the bottom of the screen will show telling it copied respectively the username and password) and click OK When warnings are given on Agree on Licenses , type Y and Enter This will Download, install and Configure RabbitMQ on the machine. The process takes approx. 5 minutes The RabbitMQ Management webpage should open of RabbitMQ (just accept the IE11 settings and proceed by clicking the OK button). This means RabbitMQ has been installed and configured. You can close Internet Explorer as we don't need it. Also close the Powershell commandline. Back in your Secret Server UI (on RabbitMQ), click OK to close the Site Connector Credentials screen Click Validate , next to validated to make sure the RabbitMQ is correctly installed In the next screen click Validate Click Save Click Skip this Step and click OK on the Confirm Skipping Engine Download warning If no errors have been detected, you will be presented with the Site screen configuration","title":"Installation of RabbitMQ"},{"location":"lab1/lab1/#add-thylablocal-site","text":"In the Site screen, click the Add Site button Name the site thylab.local Set the Site Connector to rabbitmq Set the Engine callback Interval to 30 (seconds). This is just for testing/demoing purpose. In production this would be 5 minutes, depending on the organization and the jobs that need to be run in the site. Click Add SIte **","title":"Add thylab.local site"},{"location":"lab1/lab1/#first-distributed-engine-de","text":"Navigate to Administrattion > Setup & System Maintenance > Distributed Engine and click the Add Engine button. In the next screen make sure that: Processor Architecture is 64-bit Preconfigured Site: thylab.local Click Download Now After the download, goto the Downloads directory using Windows Explorer and Extract the download ZIP file (Right-click the file and Extract...) When the extraction has been done, open the extract folder and run the setup.exe (no interaction is needed). On the UAC, click Yes Close the Windows Explorer screen and return to the Secret Server UI In Site: thylab.local there should be a amber \"warning\" of 1 Engine Pending Expand the thylab.local site and move the mouse on top of the RabbitMQ.thylab.local server On the right side of that DE, click the three dots and select Activate Click OK in the confirmation message. This will now, if all configured correct, will have two green check marks. NOTE You may have to refresh your browser to see the two green checks Close the Browser screen and logout of the server as we are ready for now on this server","title":"First Distributed Engine (DE)"},{"location":"lab10/lab10/","text":"Disaster Recovery Since version 11.2 of Delinea Secret Server, Disaster Recovery (DR) has been added. This option makes it possible to have a standby instance available for Secrets. This part of the lab is on how to setup DR between On-Prem instances. The following scenario's can be setup in real life and are supported: On-Prem to Secret Server Cloud (but is an edge case) On-Prem to On-Prem Secret Server Cloud to Secret Server Cloud Secret Server Cloud to On-Prem Remark In the DR scenario's the receiving side of the solution is PULLING the secrets. This means that in the last scenario, On-Prem to Secret Server Cloud, the On-Prem instance needs to aacessible AND have a valid certificate! Without this, that scenario can NOT be implemented. In the current version the following can be replicated: Secrets Secret Templates Folders Launchers Roles The following steps are described: Set the correct role permissions for DR Create a User Group that can access the Replicated information Setup DR Test DR Set the correct role permissions As the DR permissions is by default not enabled in any of the OOTB roles, it needs to be assigned to a role. The Administrator is going to be assigned this permission. Open the console of sspm-dr Start Chrome and open the UI at https://sspm-dr.greensafe.lab/SecretServer Login using the below information: Username: ss_admin Password: Provided by trainer Navigate to Administration >> > Users, Roles, Access > Roles Click Administrator Click the Permissions tab Click Add and add the Administer Disaster Recovery permission Close the panel on the right hand side by clicking the X in the topright corner Refresh the browser and navigate to Administration >> > Setup & System Maintenace a new option will now be available Disaster Recovery Open a new tab in Chrome and navigate to https://sspm.thylab.local/SecretServer and login as ss-admin with the corresponding password Repeat steps 4 - 9 to set the permissions on the sspm server Create User Group To make sure the Replication is only available for a certain group of people and not all, a group will be created and users will be assigned to the group that are alloowed to see/access the replicated secrets. As the DR side is a clean installtion, only the ss_admin account does exist. As this lab is about how to setup DR bewteen Secret Server instances, we are going to assign the ss_admin account to the group. Switch back to the sspm-dr UI tab in Chrome, navigate to Administration >> > Users, Roles, Access > Roles Click the Groups tab and click Create Group Name the Group DR-Users In the new window click Add to add the ss_admin user Setup DR Now that we have the permissions set on both systems and we have a group, we can start to configure the DR. Switch back to the sspm-dr UI tab, the first tab in Chrome and navigate to Administration >> > Setup & System Maintenace Click on Disaster Recovery and make sure you are in the Incoming Configuration Click Edit Set the following parameters: Enabled: Checked Data Source URL: https://sspm.thylab.local/SecretServer Group: DR Users Data Source Key: To get this Key, follow the next steps: Switch to the Second tab where the SSPM UI is located Click Disaster Recovery after you navigated to Administration >> > Setup & System Maintenace Click Outgoing Configuration tab Click Outgoing Setup Steps In the new screen, click Copy Data Source Key Switch back to the first tab (sspm-dr UI) and copy the information Click Save Switch back to the sspm UI and while still in Disaster recovery , refresh the browser. A message will be shown in the Outgoing Configuration tab For the replication to be able to run, a Data Store Path has to be set. Click the text < Not Set > and set the path to C:\\Windows\\Temp Click Save Click the Small Down Pointing arrow next to the Data Replica to see details In the details click the Approve button, also in the Confirm Approve Data Replica screen that apears The status should change to Enabled with a Green checkbox in front of it Switch back to the sspm-dr UI in Chrome and a message is shown stating \"This instance of Secret Server is a replica. Any changes made here will not be reflected in the main instance.\" Click Test Connection and a new screen will appear that the Connection was approved Click Close Click Secrets in the left hand side navigation bar and see that there are no secrets available Navigate back to Administration >> > Setup & System Maintenace > Disaster Recovery Click Run data Replication to start the replication Click Run Now in the Confirm Run data Replication Now screen Click Close in the Data Replication screen to close the screen Click Secrets and after a few seconds all Folders, including all personal ones, and their corresponding secrets will be available in the sspm-dr UI This concludes this part of the lab","title":"Disaster Recovery"},{"location":"lab10/lab10/#disaster-recovery","text":"Since version 11.2 of Delinea Secret Server, Disaster Recovery (DR) has been added. This option makes it possible to have a standby instance available for Secrets. This part of the lab is on how to setup DR between On-Prem instances. The following scenario's can be setup in real life and are supported: On-Prem to Secret Server Cloud (but is an edge case) On-Prem to On-Prem Secret Server Cloud to Secret Server Cloud Secret Server Cloud to On-Prem Remark In the DR scenario's the receiving side of the solution is PULLING the secrets. This means that in the last scenario, On-Prem to Secret Server Cloud, the On-Prem instance needs to aacessible AND have a valid certificate! Without this, that scenario can NOT be implemented. In the current version the following can be replicated: Secrets Secret Templates Folders Launchers Roles The following steps are described: Set the correct role permissions for DR Create a User Group that can access the Replicated information Setup DR Test DR","title":"Disaster Recovery"},{"location":"lab10/lab10/#set-the-correct-role-permissions","text":"As the DR permissions is by default not enabled in any of the OOTB roles, it needs to be assigned to a role. The Administrator is going to be assigned this permission. Open the console of sspm-dr Start Chrome and open the UI at https://sspm-dr.greensafe.lab/SecretServer Login using the below information: Username: ss_admin Password: Provided by trainer Navigate to Administration >> > Users, Roles, Access > Roles Click Administrator Click the Permissions tab Click Add and add the Administer Disaster Recovery permission Close the panel on the right hand side by clicking the X in the topright corner Refresh the browser and navigate to Administration >> > Setup & System Maintenace a new option will now be available Disaster Recovery Open a new tab in Chrome and navigate to https://sspm.thylab.local/SecretServer and login as ss-admin with the corresponding password Repeat steps 4 - 9 to set the permissions on the sspm server","title":"Set the correct role permissions"},{"location":"lab10/lab10/#create-user-group","text":"To make sure the Replication is only available for a certain group of people and not all, a group will be created and users will be assigned to the group that are alloowed to see/access the replicated secrets. As the DR side is a clean installtion, only the ss_admin account does exist. As this lab is about how to setup DR bewteen Secret Server instances, we are going to assign the ss_admin account to the group. Switch back to the sspm-dr UI tab in Chrome, navigate to Administration >> > Users, Roles, Access > Roles Click the Groups tab and click Create Group Name the Group DR-Users In the new window click Add to add the ss_admin user","title":"Create User Group"},{"location":"lab10/lab10/#setup-dr","text":"Now that we have the permissions set on both systems and we have a group, we can start to configure the DR. Switch back to the sspm-dr UI tab, the first tab in Chrome and navigate to Administration >> > Setup & System Maintenace Click on Disaster Recovery and make sure you are in the Incoming Configuration Click Edit Set the following parameters: Enabled: Checked Data Source URL: https://sspm.thylab.local/SecretServer Group: DR Users Data Source Key: To get this Key, follow the next steps: Switch to the Second tab where the SSPM UI is located Click Disaster Recovery after you navigated to Administration >> > Setup & System Maintenace Click Outgoing Configuration tab Click Outgoing Setup Steps In the new screen, click Copy Data Source Key Switch back to the first tab (sspm-dr UI) and copy the information Click Save Switch back to the sspm UI and while still in Disaster recovery , refresh the browser. A message will be shown in the Outgoing Configuration tab For the replication to be able to run, a Data Store Path has to be set. Click the text < Not Set > and set the path to C:\\Windows\\Temp Click Save Click the Small Down Pointing arrow next to the Data Replica to see details In the details click the Approve button, also in the Confirm Approve Data Replica screen that apears The status should change to Enabled with a Green checkbox in front of it Switch back to the sspm-dr UI in Chrome and a message is shown stating \"This instance of Secret Server is a replica. Any changes made here will not be reflected in the main instance.\" Click Test Connection and a new screen will appear that the Connection was approved Click Close Click Secrets in the left hand side navigation bar and see that there are no secrets available Navigate back to Administration >> > Setup & System Maintenace > Disaster Recovery Click Run data Replication to start the replication Click Run Now in the Confirm Run data Replication Now screen Click Close in the Data Replication screen to close the screen Click Secrets and after a few seconds all Folders, including all personal ones, and their corresponding secrets will be available in the sspm-dr UI","title":"Setup DR"},{"location":"lab11/lab11/","text":"Summarize the lab To summarize what has been done: Setup a Site Connector based on RabbitMQ Define a site thylab.local Deploy a Distributed Engine in the site Define a second site greensafe.lab Deploy a Distributed Engine in the site Run discovery on the second site for users and computers Configure and test SSH and RDP proxied sessions Creating and testing Secrets Policies Creating and testing Secret Server Teams and their setting and how that impacts what users can/can't do using Lists and Site restrictions Create hooks on check out/in actions Custom discovery to discover SQL Server accounts Create a custom RPC for the existing VyOS router Setup and use Disater Recovery of the Secret Server between the two domains The total network traffic with respect to the Secret Server, the RabbitMQ and the DEs is shown below Which simplified, is the same as the earlier shown picture This concludes the lab","title":"Summarize the lab"},{"location":"lab11/lab11/#summarize-the-lab","text":"To summarize what has been done: Setup a Site Connector based on RabbitMQ Define a site thylab.local Deploy a Distributed Engine in the site Define a second site greensafe.lab Deploy a Distributed Engine in the site Run discovery on the second site for users and computers Configure and test SSH and RDP proxied sessions Creating and testing Secrets Policies Creating and testing Secret Server Teams and their setting and how that impacts what users can/can't do using Lists and Site restrictions Create hooks on check out/in actions Custom discovery to discover SQL Server accounts Create a custom RPC for the existing VyOS router Setup and use Disater Recovery of the Secret Server between the two domains The total network traffic with respect to the Secret Server, the RabbitMQ and the DEs is shown below Which simplified, is the same as the earlier shown picture","title":"Summarize the lab"},{"location":"lab2/lab2/","text":"Add second site There is now one site (thylab.local) configured with a DE assigned to it. As the organisation has merged with a second organisation, Greensafe, we now need to configure Secret Server that there is another site that needs to be managed by Secret Server via a DE. This will be done by: Defining another site Install and assign a DE to the greensafe.lab site Add site Open the console of the db-server server, login as Alex Foster (afoster) with the password Centr1fy and open the URL using Chrome (you can set Chrome as the default browser) https://sspm.thylab.local/SecretServer and login using the ss-admin account with your set password Navigate to Administrattion > Setup & System Maintenance > Distributed Engine Click Add Site Name the site greensafe.lab Set the Site Connector to rabbitmq Set the Engine callback Interval to 30 (seconds). This is just for testing/demoing purpose. In production this would be 5 minutes, depending on the organization and the jobs that need to be run in the site. Click Add Site Install a DE in the second infrastructure Now that the second organisation is added as a site, it needs to be provided with a DE, that way Secret Server can communicate over port 443 with the Greensafe infrastructure using the distributed engine. An other reason for deploying a DE is that it will allow us to scan and run Remote Password Changers (RPC) decentralised in the Greensafe Infrastructure. Navigate to Administrattion > Setup & System Maintenance > Distributed Engine Click Add Engine Check the Processor Architecture and make sue it says 64-bit Set the Preconfigured site to greensafe.lab Click Download Now to download a ZIP file Open a Windows Explorer and navigate to Downloads Extract the ZIP file and run the setup.exe Application Close the Windows Explorer screens after the installation has finished Return to the Secret Server UI and make sure you are at Administrattion > Setup & System Maintenance > Distributed Engine After a few seconds, your deployed engine should be seen in the UI in the Pending Engines section. If the DE isn't shown, refresh your browser Expand the greensafe.lab site Hoover over the db-server.greensafe.lab engine and click the three dots on the right Click Activate in the dropdown menu, and OK If there is still a warning box next to the greensafe.lab site, refresh your browser Your UI should look like the below screenshot if all went well This concludes this part of the lab","title":"Add Site"},{"location":"lab2/lab2/#add-second-site","text":"There is now one site (thylab.local) configured with a DE assigned to it. As the organisation has merged with a second organisation, Greensafe, we now need to configure Secret Server that there is another site that needs to be managed by Secret Server via a DE. This will be done by: Defining another site Install and assign a DE to the greensafe.lab site","title":"Add second site"},{"location":"lab2/lab2/#add-site","text":"Open the console of the db-server server, login as Alex Foster (afoster) with the password Centr1fy and open the URL using Chrome (you can set Chrome as the default browser) https://sspm.thylab.local/SecretServer and login using the ss-admin account with your set password Navigate to Administrattion > Setup & System Maintenance > Distributed Engine Click Add Site Name the site greensafe.lab Set the Site Connector to rabbitmq Set the Engine callback Interval to 30 (seconds). This is just for testing/demoing purpose. In production this would be 5 minutes, depending on the organization and the jobs that need to be run in the site. Click Add Site","title":"Add site"},{"location":"lab2/lab2/#install-a-de-in-the-second-infrastructure","text":"Now that the second organisation is added as a site, it needs to be provided with a DE, that way Secret Server can communicate over port 443 with the Greensafe infrastructure using the distributed engine. An other reason for deploying a DE is that it will allow us to scan and run Remote Password Changers (RPC) decentralised in the Greensafe Infrastructure. Navigate to Administrattion > Setup & System Maintenance > Distributed Engine Click Add Engine Check the Processor Architecture and make sue it says 64-bit Set the Preconfigured site to greensafe.lab Click Download Now to download a ZIP file Open a Windows Explorer and navigate to Downloads Extract the ZIP file and run the setup.exe Application Close the Windows Explorer screens after the installation has finished Return to the Secret Server UI and make sure you are at Administrattion > Setup & System Maintenance > Distributed Engine After a few seconds, your deployed engine should be seen in the UI in the Pending Engines section. If the DE isn't shown, refresh your browser Expand the greensafe.lab site Hoover over the db-server.greensafe.lab engine and click the three dots on the right Click Activate in the dropdown menu, and OK If there is still a warning box next to the greensafe.lab site, refresh your browser Your UI should look like the below screenshot if all went well","title":"Install a DE in the second infrastructure"},{"location":"lab3/lab3/","text":"Discovery of the second domain Now that both organisations have been added to the Secret Server instance it is time to start the Discovery of the domains. To be able to manage the second infrastructure via the DE, discovery needs to be configured for the Greensafe.lab domain. After the discovery of Machine, Dependencies and Accounts the next configuration step can take place, defining the correct access rights to the Domain admins of the two different organisations. Adding secret for AD Sync Greensafe Log out of the db-server Switch back to the SSPM server and refresh your browser Login as ss-admin (as we have been logged out due to the login on the db-server, re-login is needed) Navigate to Secrets >> > TSS Service Accounts and add a new secret by clicking the + sign in the top top right corner next to the SS icon Make sure the template to use is Active Directory Use the following parameters Secret Name: AD Sync Greensafe Domain: greensafe.lab Username: cfyadmin Password: Centr1fy Notes: Account used for Discovery Scan Greensafe Site: greensafe.lab Click Create Secret Configure Directory Service Greensafe Navigate to Administration >> > Users, Roles, Access > Directory Services Click Add Domain > Active Directory Domain Use the following parameters Fully Qualified Domain Name: greensafe.lab Friendly name: Greensafe Synchronization Secret: AD Sync Greensafe (be patient to get the full list of secrets available) Site: greensafe.lab Click Validate & Save In the groups select the following groups: Domain Admins Team_Auditors Team_Contractors Team_Finance Team_Helpdesk Team_IT Team_Sales Team_Security Team_UnixAdmins Team_UNIXDBA Team_WindowsDBA Run Sync Now Configure and run Discovery Scanner for Greensafe Navigate to Administration >> > Actions > Discovery Click Create Discovery Source > Active Directory Use the following parameters Discovery Source Name: greensafe.lab Fully Qualified Domain Name: greensafe.lab Friendly name: Greensafe Discovery Secret: AD Sync Greensafe Discovery Site: greensafe.lab Click Create In the next step, under Find Dependencies , select all options Click Save Navigate back to Administration >> > Actions > Discovery Click Run Discovery Now > Run Discovery Scan Wait till the status from Running has switched to Last Run: Just Now Repeat the same steps, but now Run Computer scan, this will detect local accounts See the discovered accounts Click Discovery Network View You should now have two domains being mentioned Expand both domain and have a look around. Click the tabs (Local Account, Public Keys, Service Accounts and Domain\\Cloud Accounts) all should have some info. This means the Discovery scan has run successfully and Secret Server can now start to control the accounts. This concludes this part of the lab","title":"Discovery of the second domain"},{"location":"lab3/lab3/#discovery-of-the-second-domain","text":"Now that both organisations have been added to the Secret Server instance it is time to start the Discovery of the domains. To be able to manage the second infrastructure via the DE, discovery needs to be configured for the Greensafe.lab domain. After the discovery of Machine, Dependencies and Accounts the next configuration step can take place, defining the correct access rights to the Domain admins of the two different organisations.","title":"Discovery of the second domain"},{"location":"lab3/lab3/#adding-secret-for-ad-sync-greensafe","text":"Log out of the db-server Switch back to the SSPM server and refresh your browser Login as ss-admin (as we have been logged out due to the login on the db-server, re-login is needed) Navigate to Secrets >> > TSS Service Accounts and add a new secret by clicking the + sign in the top top right corner next to the SS icon Make sure the template to use is Active Directory Use the following parameters Secret Name: AD Sync Greensafe Domain: greensafe.lab Username: cfyadmin Password: Centr1fy Notes: Account used for Discovery Scan Greensafe Site: greensafe.lab Click Create Secret","title":"Adding secret for AD Sync Greensafe"},{"location":"lab3/lab3/#configure-directory-service-greensafe","text":"Navigate to Administration >> > Users, Roles, Access > Directory Services Click Add Domain > Active Directory Domain Use the following parameters Fully Qualified Domain Name: greensafe.lab Friendly name: Greensafe Synchronization Secret: AD Sync Greensafe (be patient to get the full list of secrets available) Site: greensafe.lab Click Validate & Save In the groups select the following groups: Domain Admins Team_Auditors Team_Contractors Team_Finance Team_Helpdesk Team_IT Team_Sales Team_Security Team_UnixAdmins Team_UNIXDBA Team_WindowsDBA Run Sync Now","title":"Configure Directory Service Greensafe"},{"location":"lab3/lab3/#configure-and-run-discovery-scanner-for-greensafe","text":"Navigate to Administration >> > Actions > Discovery Click Create Discovery Source > Active Directory Use the following parameters Discovery Source Name: greensafe.lab Fully Qualified Domain Name: greensafe.lab Friendly name: Greensafe Discovery Secret: AD Sync Greensafe Discovery Site: greensafe.lab Click Create In the next step, under Find Dependencies , select all options Click Save Navigate back to Administration >> > Actions > Discovery Click Run Discovery Now > Run Discovery Scan Wait till the status from Running has switched to Last Run: Just Now Repeat the same steps, but now Run Computer scan, this will detect local accounts","title":"Configure and run Discovery Scanner for Greensafe"},{"location":"lab3/lab3/#see-the-discovered-accounts","text":"Click Discovery Network View You should now have two domains being mentioned Expand both domain and have a look around. Click the tabs (Local Account, Public Keys, Service Accounts and Domain\\Cloud Accounts) all should have some info. This means the Discovery scan has run successfully and Secret Server can now start to control the accounts.","title":"See the discovered accounts"},{"location":"lab4/lab4/","text":"Proxying SSH and RDP To be able to connect to the second organisation Secret Server needs to be configured. There a couple a ways to do this. One is to keep the secrets in the Vault and use them to connect to the servers via RDP or SSH via the client machines of the users, but this will send the credentials over the network to the server. This means that the machine you are starting the connection from needs to have a direct connection to the server. Another option is to use the Secret Server instance and/or DE to proxy the connection towards the server. This will NOT have the user's machine connect directly to the server, but use the proxy as the endpoint of the connection. This last option is what is the most secure path. Credentials are NOT send towards the servers. Instead a temporary account is being used to make the connection to the server. After the session is done, the account will be deleted and there is no connection anymore possible to the server using that account. Overview of the traffic Below diagram show the traffic for SSH and RDP and the involved machines from the infrastructure Scenario 1: Connect to greensafe.lab ssh host, apps-unix.greensafe.lab, from the client VM in a SSH proxied connection Scenario 2: Connect to greensafe.lab RDP host, dc-server.greensafe.lab, from the client VM in a RDP proxied connection Enabling Proxying Navigate to Administration >> > Actions > Proxying > SSH Proxy tab and click Edit next to Enable SSH Proxy Enable SSH Proxy and click Save Navigate to RDP Proxy tab and click Edit next to Enable RDP Proxy Enable RDP Proxy and click Save The RDP port has been set to 3390 as 3389 is taken by Windows self Click Edit next to RDP Server Certificate Click Change Navigate to Downloads in the popup screen Select the sspm.thylab.local certificate Provide the password Thycotic Click Save As both orgnisations use self-signed certificates and might use the same computernames, small changes need to be made for RDP to work Click Edit on Validate Remote Certificates and uncheck it, then click Save Click Edit on Allow AD Site Selection and check it, then click Save Click the Endpoints tab Click Edit behind the SSPM machine Fill the Public Hostname or IP as 172.31.32.114 Click Save Under SITES , click the Edit (to the far right) next to thylab.local Enable SSH and RDP proxy, leave the default ports Click Save Repeat the steps for the greensafe.lab site Both sites should now have RDP and SSH enabled and respectively port 3390 and 22 Test the proxy In this part of the lab we are going to check that we are using the proxy to connect to the server. Firstly SSH and then RDP connections. To connect to the remote machines secrets are needed. Then these secrets can be used to connect the machines using Secret Server and/or the DEs as proxy. Creating Extra Secrets Navigate to Secrets >> > IT Team > IT - Unix Team Create a secret with the following parameters: Secret Template: Unix Account (SSH) Secret name: Greensafe - Root account Machine: apps-unix.greensafe.lab Username: root Password: password1 Site: greensafe.lab Click Create Secret click the Security Tab See that the Enable proxy is enabled (scroll down to see the setting) Navigate to Secrets >> > IT Team > IT - Server Team Create a secret with the following parameters: Secret Template: Windows Account Secret name: Greensafe - Domain Controller Machine: dc-server Username: Administrator Password: Centr1fy Site: greensafe.lab Click Create Secret Due to a policy that is running on this folder, comments have to be given. Click Comment and provide some text and click Check Out Secret Under the Security Tab , make sure the Proxy is enabled, if not, make it so and return to the General tab NOTE Make sure that the apps-unix and CentOS Server VMs are in a running state before proceeding! Proxied SSH connection Switch to the Client machine and login using the adm-training account Open Chrome and navigate to the Secret Server UI (you can set chrome as the default browser) and login as ss-admin Navigate to Secrets >> > IT Team > IT Unix team Click the Greensafe - Root account secret Run the PuTTY Launcher On the Protocol Handler Failed to Launch message, click Download 64-bit Run the downloaded MSI, no interaction, other than the UAC, is needed Click Cancel and relaunch the PuTTY Launcher On the Open RDPWinBootstrapper screen that opens, check the box and click the Open RDPWinBootstrapper Click Yes on the warning for the connection Click Accept on the Putty Security Alert When you are logged into the Linux server, a banner has been shown that says === Welcome to the Secret Server SSH Proxy === . Also the temporary user name is shown in the screen (in the blue box) Run netstat -a | grep ssh you will see that you have now a connection via the Distributed Engine in the greensafe.lab domain (db-server.greensafe.lab) There is no direct connection from the client (172.31.32.118) Logout from the server using CTRL+D Proxied RDP connection Wile still being on the Client VM , navigate to Secrets >> > IT Team > IT - Server Admin > Greensafe - Domain Controller and provide a comment Launch the RDP launcher and you should see a connection being made to the Desktop of the dc-server When you get Warning Messages, agree on all of them for the connection. This is due to self signed certificates that have not been embedded in the environment Open a CMD prompt and type netstat -a | findstr /c:3389 This command shows the RDP session that is established. Only from DB-SERVER (our Distributed Engine in the domain) is shown, not the client machine Close the session by signing out This concludes this part of the lab","title":"Proxying SSh and RDP"},{"location":"lab4/lab4/#proxying-ssh-and-rdp","text":"To be able to connect to the second organisation Secret Server needs to be configured. There a couple a ways to do this. One is to keep the secrets in the Vault and use them to connect to the servers via RDP or SSH via the client machines of the users, but this will send the credentials over the network to the server. This means that the machine you are starting the connection from needs to have a direct connection to the server. Another option is to use the Secret Server instance and/or DE to proxy the connection towards the server. This will NOT have the user's machine connect directly to the server, but use the proxy as the endpoint of the connection. This last option is what is the most secure path. Credentials are NOT send towards the servers. Instead a temporary account is being used to make the connection to the server. After the session is done, the account will be deleted and there is no connection anymore possible to the server using that account.","title":"Proxying SSH and RDP"},{"location":"lab4/lab4/#overview-of-the-traffic","text":"Below diagram show the traffic for SSH and RDP and the involved machines from the infrastructure","title":"Overview of the traffic"},{"location":"lab4/lab4/#scenario-1","text":"Connect to greensafe.lab ssh host, apps-unix.greensafe.lab, from the client VM in a SSH proxied connection","title":"Scenario 1:"},{"location":"lab4/lab4/#scenario-2","text":"Connect to greensafe.lab RDP host, dc-server.greensafe.lab, from the client VM in a RDP proxied connection","title":"Scenario 2:"},{"location":"lab4/lab4/#enabling-proxying","text":"Navigate to Administration >> > Actions > Proxying > SSH Proxy tab and click Edit next to Enable SSH Proxy Enable SSH Proxy and click Save Navigate to RDP Proxy tab and click Edit next to Enable RDP Proxy Enable RDP Proxy and click Save The RDP port has been set to 3390 as 3389 is taken by Windows self Click Edit next to RDP Server Certificate Click Change Navigate to Downloads in the popup screen Select the sspm.thylab.local certificate Provide the password Thycotic Click Save As both orgnisations use self-signed certificates and might use the same computernames, small changes need to be made for RDP to work Click Edit on Validate Remote Certificates and uncheck it, then click Save Click Edit on Allow AD Site Selection and check it, then click Save Click the Endpoints tab Click Edit behind the SSPM machine Fill the Public Hostname or IP as 172.31.32.114 Click Save Under SITES , click the Edit (to the far right) next to thylab.local Enable SSH and RDP proxy, leave the default ports Click Save Repeat the steps for the greensafe.lab site Both sites should now have RDP and SSH enabled and respectively port 3390 and 22","title":"Enabling Proxying"},{"location":"lab4/lab4/#test-the-proxy","text":"In this part of the lab we are going to check that we are using the proxy to connect to the server. Firstly SSH and then RDP connections. To connect to the remote machines secrets are needed. Then these secrets can be used to connect the machines using Secret Server and/or the DEs as proxy.","title":"Test the proxy"},{"location":"lab4/lab4/#creating-extra-secrets","text":"Navigate to Secrets >> > IT Team > IT - Unix Team Create a secret with the following parameters: Secret Template: Unix Account (SSH) Secret name: Greensafe - Root account Machine: apps-unix.greensafe.lab Username: root Password: password1 Site: greensafe.lab Click Create Secret click the Security Tab See that the Enable proxy is enabled (scroll down to see the setting) Navigate to Secrets >> > IT Team > IT - Server Team Create a secret with the following parameters: Secret Template: Windows Account Secret name: Greensafe - Domain Controller Machine: dc-server Username: Administrator Password: Centr1fy Site: greensafe.lab Click Create Secret Due to a policy that is running on this folder, comments have to be given. Click Comment and provide some text and click Check Out Secret Under the Security Tab , make sure the Proxy is enabled, if not, make it so and return to the General tab NOTE Make sure that the apps-unix and CentOS Server VMs are in a running state before proceeding!","title":"Creating Extra Secrets"},{"location":"lab4/lab4/#proxied-ssh-connection","text":"Switch to the Client machine and login using the adm-training account Open Chrome and navigate to the Secret Server UI (you can set chrome as the default browser) and login as ss-admin Navigate to Secrets >> > IT Team > IT Unix team Click the Greensafe - Root account secret Run the PuTTY Launcher On the Protocol Handler Failed to Launch message, click Download 64-bit Run the downloaded MSI, no interaction, other than the UAC, is needed Click Cancel and relaunch the PuTTY Launcher On the Open RDPWinBootstrapper screen that opens, check the box and click the Open RDPWinBootstrapper Click Yes on the warning for the connection Click Accept on the Putty Security Alert When you are logged into the Linux server, a banner has been shown that says === Welcome to the Secret Server SSH Proxy === . Also the temporary user name is shown in the screen (in the blue box) Run netstat -a | grep ssh you will see that you have now a connection via the Distributed Engine in the greensafe.lab domain (db-server.greensafe.lab) There is no direct connection from the client (172.31.32.118) Logout from the server using CTRL+D","title":"Proxied SSH connection"},{"location":"lab4/lab4/#proxied-rdp-connection","text":"Wile still being on the Client VM , navigate to Secrets >> > IT Team > IT - Server Admin > Greensafe - Domain Controller and provide a comment Launch the RDP launcher and you should see a connection being made to the Desktop of the dc-server When you get Warning Messages, agree on all of them for the connection. This is due to self signed certificates that have not been embedded in the environment Open a CMD prompt and type netstat -a | findstr /c:3389 This command shows the RDP session that is established. Only from DB-SERVER (our Distributed Engine in the domain) is shown, not the client machine Close the session by signing out","title":"Proxied RDP connection"},{"location":"lab5/lab5/","text":"Secrets manipulation using folders Now that both organisations have been discovered, scanned and the proxy connection is working, it's time to start organising the secrets and corresponding access rights to secrets. The combined IT Security has been defined as following: IT Admins from the Thylab domain are allowed to use and see ALL secrets to access ALL servers AND must comment with checkout why they need access to the Thylab servers. After the session closes, the password needs to be rotated IT Admins from the Greensafe domain are allowed to ONLY see the secrets of their Legacy environment and use them on their servers and are allowed to retrieve passwords The UNIX admins are allowed to see ALL unix related secrets and can use them to access ALL Unix related machines but are not allowed to see the passwords For all users all sessions (RDP and SSH) MUST run proxied Define policies To make sure possibilities are enforced upon users, polices can be used. The policies can be set on a per secret bases, or in a more scalable way on folders. Stay on the Client vm Navigate to Administration >> > Actions > Secret Policies One policy already exists IT Server Team - Domain Admin Policy , click on the policy to see the settings. Changing between the tabs have to be done. Remote Password Changing Auto Change - Default Only - Unchecked (= Enforced) Security tab Require Checkout - Yes - Default Only - Checked Custom Check Out Interval - Default - 120 Require Comment - Yes - Default Only - Checked Open the Summary Tab and click Edit Change the following for the policy Name: Policy - Thylab comment on access to Windows secrets Description: Comments Required for access to the secrets and check out/in, RPC enabled Click Save Open the Security tab and set the following after clicking Edit Require Check Out: Yes - Default Only - Unchecked Custom check Out Interval: 60 - Default Only - Unchecked Change Password on check In: Yes - Default Only - Unchecked Require Comment: Yes - Default Only - Unchecked Enable proxy: Yes - Default Only - Unchecked Click Save and click OK on the Confirm message Open the Remote Password Changing tab and set the following after clicking Edit Heartbeat Enabled: Yes - Default Only - Unchecked Click Save and click OK on the Confirm message Navigate to Administration >> > Actions > Secret Policies Create a new policy by clicking Add and use the following parameters: Name: Policy - Proxy all sessions Description: Policy to use only proxy connections Enabled: Checked Open the Security tab and set the following after clicking Edit Enable Proxy: Yes - Default Only - Unchecked Click Save and click OK on the Confirm message Click Secret Policy (in the top of the screen) to return to all the policies Create a new policy and use the following parameters: Name: Policy - Unix hide password with proxy Description: Policy for Unix systems to hide passwords and use the proxy Enabled: Checked On the Security tab Hide Launcher Password: Yes - Default Only - Unchecked Enable Proxy: Yes - Default Only - Unchecked Click Save and click OK on the Confirm message Configure the new folder structure and policies To be able to assign the correct rights, the folder structure needs to be more hierarchial than it is today. All is now from one organisation's PoV. 1. Navigate to Secrets >> 2. Right-click the IT Team folder and select Edit Folder 3. Click the Permissions tab and Click Edit 4. Add Team_UNIXAdmins , Team_UNIXDBA , Team_IT and Team_Heldesk by clicking them and dragging to the left where the other accounts are shown 5. Click Save 2. Navigate to Secrets >> > IT Team > IT - Server Team 3. Right-click the IT - Server Team folder and select Edit Folder 4. Click Edit next to Secret Policy and select Proxy all sessions 5. Click Save 11. Click the Permissions tba and click Edit 12. Add Team_IT and Team_Helpdesk 13. Click Save 14. Create a folder called Thylab under IT - Server Team by right clicking this folder and select Add Subfolder ![Move Secrets - 3](images/ss-adv-0045.png) Navigate back to IT - Server Team Select the secrets Checkout Example, RFA Example, Server team - Domain Admin and Click Bulk Actions at the bottom of the screen Click Move To Folder Navigate to IT Team > IT - Server Team > Thylab and click Move Secrets Click Close after the Bulk Progress is ready Only one secret should be left in the folder Greensafe - Domain Controller Right-click the Thylab folder and select Edit Folder Click Edit next to Secret Policy and select Policy - Thylab comment on access to Windows secrets Click Permissions tab Click Edit Uncheck Inherit Permissions Remove ALL greensafe.lab groups by clicking the Bin ico when hoovering over the account Click Save Right-click the IT - Unix Team folder and select Edit Folder Click Edit next to Secret Policy and select Policy - Unix hide password with proxy Click Save Click Permissions tab Click Edit Add Team_UNIXAdmins, Team_UNIXDBA, Team_IT and Team_Heldesk Click Save Add secret for the Greensafe domain In the IT Secrets > IT - Server Team folder where there is only one secret add the following secret Secret Template: Windows Account Secret name: Greensafe - DB Server Machine: db-server Username: afoster Password: Centr1fy Site: greensafe.lab Click Create Secret Test the configuration Now that the setup is ready to be used, testing is in order. For this test the client machine will be used. Note The passwords as you shown in the screenshots will be different per installation and will not reflect your infrastructure Logout the current user of the Secret Server UI by clicking the icon in the top right corner and select Log Out Click Login Login as user krogers with Centr1fy in the Greensafe domain Kim Rogers should only see the IT Team > IT - Unix Team folders and the corresponding secrets Click one of the secrets. The Password Field will not be shown as set by the policy Open the Security tab Scroll down and see that there is no way to make any changes to the settings Navigate back to the General tab and run the PuTTY launcher and see that the proxy banner is shown. That proofs that the connection is made via the SSH proxy Close the session using CTRL+D Logout of the Secret Server UI by clicking the initials KR in the upper right corner and select Log Out Click Log in and log in as LScott with Centr1fy and the Greensafe domain She has access to the Greensafe Windows servers and can see the password Open the Security tab and see that the Enable Proxy is enabled and can not be unchecked Switch back to the General tab and run the RDP Launcher Close the RDP session after you see the desktop Logout of the Secret Server UI by clicking the initials LS in the upper right corner and select Log Out Login the Secret Server UI as dhughes with Thycotic@2022! and the Thylab domain, click Continue on the Welcome screen This user should have besides the IT - Server Team folder also the Thylab folder Navigate to the Thylab folder and open Server Team - Domain Admins secret Due to the policy you have to leave a comment and check out the secret Leave a comment and click Check Out Secret Click the EYE icon and see the current password as that right is given Run the RDP Launcher and select DC1 you see and select thylab.local as the Proxy Site then click Launch Now Note The dropdown box is due to the Secret Template that is used at the time the secret has been created. We will dive deeper into this later in the lab. Sign out of the RDP session after you see the Desktop Check the Secret back in using Time > Check In Reopen the Secret and see that the password has been changed This is also conform the policy that we have defined and assigned to the folder Conclusion As summary the three security settings: IT Admins from the Thylab domain are allowed to use and see ALL secrets to access ALL servers AND must comment with checkout why they need access to the Thylab servers. After the session closes, the password needs to be rotated IT Admins from the Greensafe domain are allowed to ONLY see the secrets of their Legacy environment and use them on their servers and are allowed to retrieve passwords The UNIX admins are allowed to see ALL unix related secrets and can use them to access ALL Unix related machines but are not allowed to see the passwords For all users all sessions (RDP and SSH) MUST run proxied During the testing of the configuration, the conclusion is that (proved by the running three scenarios using three different users) the configured policies work as requested. This concludes this part of the lab","title":"Secrets manipulation using folders"},{"location":"lab5/lab5/#secrets-manipulation-using-folders","text":"Now that both organisations have been discovered, scanned and the proxy connection is working, it's time to start organising the secrets and corresponding access rights to secrets. The combined IT Security has been defined as following: IT Admins from the Thylab domain are allowed to use and see ALL secrets to access ALL servers AND must comment with checkout why they need access to the Thylab servers. After the session closes, the password needs to be rotated IT Admins from the Greensafe domain are allowed to ONLY see the secrets of their Legacy environment and use them on their servers and are allowed to retrieve passwords The UNIX admins are allowed to see ALL unix related secrets and can use them to access ALL Unix related machines but are not allowed to see the passwords For all users all sessions (RDP and SSH) MUST run proxied","title":"Secrets manipulation using folders"},{"location":"lab5/lab5/#define-policies","text":"To make sure possibilities are enforced upon users, polices can be used. The policies can be set on a per secret bases, or in a more scalable way on folders. Stay on the Client vm Navigate to Administration >> > Actions > Secret Policies One policy already exists IT Server Team - Domain Admin Policy , click on the policy to see the settings. Changing between the tabs have to be done. Remote Password Changing Auto Change - Default Only - Unchecked (= Enforced) Security tab Require Checkout - Yes - Default Only - Checked Custom Check Out Interval - Default - 120 Require Comment - Yes - Default Only - Checked Open the Summary Tab and click Edit Change the following for the policy Name: Policy - Thylab comment on access to Windows secrets Description: Comments Required for access to the secrets and check out/in, RPC enabled Click Save Open the Security tab and set the following after clicking Edit Require Check Out: Yes - Default Only - Unchecked Custom check Out Interval: 60 - Default Only - Unchecked Change Password on check In: Yes - Default Only - Unchecked Require Comment: Yes - Default Only - Unchecked Enable proxy: Yes - Default Only - Unchecked Click Save and click OK on the Confirm message Open the Remote Password Changing tab and set the following after clicking Edit Heartbeat Enabled: Yes - Default Only - Unchecked Click Save and click OK on the Confirm message Navigate to Administration >> > Actions > Secret Policies Create a new policy by clicking Add and use the following parameters: Name: Policy - Proxy all sessions Description: Policy to use only proxy connections Enabled: Checked Open the Security tab and set the following after clicking Edit Enable Proxy: Yes - Default Only - Unchecked Click Save and click OK on the Confirm message Click Secret Policy (in the top of the screen) to return to all the policies Create a new policy and use the following parameters: Name: Policy - Unix hide password with proxy Description: Policy for Unix systems to hide passwords and use the proxy Enabled: Checked On the Security tab Hide Launcher Password: Yes - Default Only - Unchecked Enable Proxy: Yes - Default Only - Unchecked Click Save and click OK on the Confirm message","title":"Define policies"},{"location":"lab5/lab5/#configure-the-new-folder-structure-and-policies","text":"To be able to assign the correct rights, the folder structure needs to be more hierarchial than it is today. All is now from one organisation's PoV. 1. Navigate to Secrets >> 2. Right-click the IT Team folder and select Edit Folder 3. Click the Permissions tab and Click Edit 4. Add Team_UNIXAdmins , Team_UNIXDBA , Team_IT and Team_Heldesk by clicking them and dragging to the left where the other accounts are shown 5. Click Save 2. Navigate to Secrets >> > IT Team > IT - Server Team 3. Right-click the IT - Server Team folder and select Edit Folder 4. Click Edit next to Secret Policy and select Proxy all sessions 5. Click Save 11. Click the Permissions tba and click Edit 12. Add Team_IT and Team_Helpdesk 13. Click Save 14. Create a folder called Thylab under IT - Server Team by right clicking this folder and select Add Subfolder ![Move Secrets - 3](images/ss-adv-0045.png) Navigate back to IT - Server Team Select the secrets Checkout Example, RFA Example, Server team - Domain Admin and Click Bulk Actions at the bottom of the screen Click Move To Folder Navigate to IT Team > IT - Server Team > Thylab and click Move Secrets Click Close after the Bulk Progress is ready Only one secret should be left in the folder Greensafe - Domain Controller Right-click the Thylab folder and select Edit Folder Click Edit next to Secret Policy and select Policy - Thylab comment on access to Windows secrets Click Permissions tab Click Edit Uncheck Inherit Permissions Remove ALL greensafe.lab groups by clicking the Bin ico when hoovering over the account Click Save Right-click the IT - Unix Team folder and select Edit Folder Click Edit next to Secret Policy and select Policy - Unix hide password with proxy Click Save Click Permissions tab Click Edit Add Team_UNIXAdmins, Team_UNIXDBA, Team_IT and Team_Heldesk Click Save","title":"Configure the new folder structure and policies"},{"location":"lab5/lab5/#add-secret-for-the-greensafe-domain","text":"In the IT Secrets > IT - Server Team folder where there is only one secret add the following secret Secret Template: Windows Account Secret name: Greensafe - DB Server Machine: db-server Username: afoster Password: Centr1fy Site: greensafe.lab Click Create Secret","title":"Add secret for the Greensafe domain"},{"location":"lab5/lab5/#test-the-configuration","text":"Now that the setup is ready to be used, testing is in order. For this test the client machine will be used. Note The passwords as you shown in the screenshots will be different per installation and will not reflect your infrastructure Logout the current user of the Secret Server UI by clicking the icon in the top right corner and select Log Out Click Login Login as user krogers with Centr1fy in the Greensafe domain Kim Rogers should only see the IT Team > IT - Unix Team folders and the corresponding secrets Click one of the secrets. The Password Field will not be shown as set by the policy Open the Security tab Scroll down and see that there is no way to make any changes to the settings Navigate back to the General tab and run the PuTTY launcher and see that the proxy banner is shown. That proofs that the connection is made via the SSH proxy Close the session using CTRL+D Logout of the Secret Server UI by clicking the initials KR in the upper right corner and select Log Out Click Log in and log in as LScott with Centr1fy and the Greensafe domain She has access to the Greensafe Windows servers and can see the password Open the Security tab and see that the Enable Proxy is enabled and can not be unchecked Switch back to the General tab and run the RDP Launcher Close the RDP session after you see the desktop Logout of the Secret Server UI by clicking the initials LS in the upper right corner and select Log Out Login the Secret Server UI as dhughes with Thycotic@2022! and the Thylab domain, click Continue on the Welcome screen This user should have besides the IT - Server Team folder also the Thylab folder Navigate to the Thylab folder and open Server Team - Domain Admins secret Due to the policy you have to leave a comment and check out the secret Leave a comment and click Check Out Secret Click the EYE icon and see the current password as that right is given Run the RDP Launcher and select DC1 you see and select thylab.local as the Proxy Site then click Launch Now Note The dropdown box is due to the Secret Template that is used at the time the secret has been created. We will dive deeper into this later in the lab. Sign out of the RDP session after you see the Desktop Check the Secret back in using Time > Check In Reopen the Secret and see that the password has been changed This is also conform the policy that we have defined and assigned to the folder","title":"Test the configuration"},{"location":"lab5/lab5/#conclusion","text":"As summary the three security settings: IT Admins from the Thylab domain are allowed to use and see ALL secrets to access ALL servers AND must comment with checkout why they need access to the Thylab servers. After the session closes, the password needs to be rotated IT Admins from the Greensafe domain are allowed to ONLY see the secrets of their Legacy environment and use them on their servers and are allowed to retrieve passwords The UNIX admins are allowed to see ALL unix related secrets and can use them to access ALL Unix related machines but are not allowed to see the passwords For all users all sessions (RDP and SSH) MUST run proxied During the testing of the configuration, the conclusion is that (proved by the running three scenarios using three different users) the configured policies work as requested.","title":"Conclusion"},{"location":"lab6/lab6/","text":"Teams With Secret Server teams, administrators can create special groups called teams to restrict what users can see. A team bundles users and groups to assign them the same rules as to what other users and sites are visible to them. For example, a managed service provider could isolate their customers from seeing other customer\u2019s user accounts or a large company could \"firewall\" their users by department. Site visibility can also be restricted by teams. The scenario we are solving is that Dennis Hughes and Joe Bloggs, even though they can see all Windows Servers in the Secret Server instance, we want to limit their view on the use of the Server Team - Domain Admin secret to allow only one server. Also they can not have the choice of selecting which Proxy to use for the connection as that might lead into issues for them when they selected the wrong one and more WAN traffic, or even errors might occur. The rest of the IT Admins have to have normal use, not limited by anything. Use the below diagram to understand what is being configured in this lab. Create a Team Role In the Secret Server UI log out from Denis Hughes' account and log back in as ss-admin , navigate to Administration >> > Users, Roles, Access > Roles Create a role named Role - Teams Assigned by clicking Create Role and click on the newly created role. Set the following rights (on the Permissions tab): Add Secret Allow Access Challenge Assign Secret Policy Copy Secret Delete Secret Delete Secrets from Reports Edit Secret Own Secret Personal Folders User Audit Expire Secrets View About View Advanced Dashboard View Advanced Secret Options View Launcher Password View Password Requirements View Secret View Secret Audit View Secret Password and Private Key History Click the X icon in the to be Add Permission navbar Create Teams In the Secret Server UI, navigate to Administration >> > user, Roles, Access > Teams Click Create Team Use the following parameters: Team Name: Thylab domain Team Description: Thylab domain Click Create Team Click the Sites tab and click Edit Check the Should Restrict Sites Under Add Site, select the thylab.lab site (the users available in Secret Server) Click Save Click Members tab and click Edit next to Members Add user Joe Bloggs and Dennis Hughes to the team Click Save Assigning the Team role to the users Navigate to Administration >> > User, Roles, Access > Roles Click Role - Teams Assigned Open the Assingment tab, if you are not on it Click Add Drag thylab.local\\Dennis Hughes and Joe Bloggs from the pane on the right hand side Close the Add Users and Groups panel to \"save\" the changes Click the Roles text in the top of the screen and click the User Role Delete thylab.local\\Dennis Hughes and Joe Bloggs from the pane by hoovering over their names and click the Bin icon Testing the set Teams Log out from the Secret Server UI Log back in as dhughes with the password Thycotic@2022! in the Thylab domain Navigate to Secrets >> > IT Team > IT - Server Team > Thylab Open the Server team - Domain Admin secret Fill out the Comment (as the policy requires this) Run the RDP Launcher Due to the teams restriction only the dropdown box for Enter Computer has been given Click Cancel , Check in the secret and log out of the UI Login as user JBloggs ( Thycotic/4u ) on the Local domain has no access at all. NOTE You will have to change the password of this user Log out Joe Bloggs Log in as user hpatel with password Thycotic@2022! in the Thylab domain has no limitation on using the Server team - Domain Admin Secret other than the dropdown list of the server to connect to. Click Cancel Log out hpatel Change to the existing list One of the items that we can manipulate to limit the amount of servers a user can see is using a feature called Lists. These can be used to limit the possibilities for connections. Log in to the Secret Server UI as ss-admin Navigate to Administration >> > Ations > Lists Open the Allowed Domain Servers- Restricted RDP Launcher Remove DC1 and SSPM by clicking the three dots on the right side of the name and click Delete Option, click OK on the warning screen Click Add > Create Option In the Option Name provide RabbitMQ , leave the Parent Category as Uncategorized and click Save Click Save Changing the Secret Template As the existing secret Server team - Domain Admin secret has been created using a specific Secret Template, changes need to be made. The outcome should be that the people in the IT team can see and use the secret with no limitation. Joe Bloggs and Dennis Hughes (a Junior Admin) should have a limitation to a secret. These changes are: Change the Secret Template that has been used while the Server team - Domain Admin was created Change the Group membership that Dennis Hughes has been assigned to in AD. This has been a mistake. Create a secret that uses the restricted list for its Launcher Log in the Secret Server UI as ss-admin and navigate to Secrets >> > IT Team > IT - Server Team > Thylab Check the Server Team - Domain Admin and click Bul Actions in the bottom of the screen Select Convert Secret Template Select Active Directory Account , in the next screen leave all default. The Allow Servers will be removed Click Create Secret Wait till the Bulk Progress is ready and click Close Click the + sign to create a new Secret Select Active Directory Account (Restricted Launch) Use the following parameters for the secret Secret name: Restricted Servers Domain: thylab.local Username: adm_serverteam2 Password: Thycotic@2022! Notes: Limited Server selection for the user to run the RDP Launcher Allowed Servers: Allowed Domain Servers - Restricted RDP Launcher Site: thylab.local Click Create Secret Provide a comment and click Check Out Secret Click the Sharing tab click Edit Uncheck Inherit Permission from folder and remove all but the ss-admin account Add accounts JBloggs and Dennis Hughes Click Add Make sure both accounts have View rights (default) Click Save Check the secret back in Changing Dennis Hughes account After a few weeks in Dennis has been given the full admin rights on all servers in the domain using Secret Server by putting his account in Active Directory in the IT- Team Server groups. To limit what he can do, his manager decided to take him out of the group and let him start slowly. Login to the DC1 machine with the thylab\\administrator account Open Active Directory Users and Computers and find Dennis Hughes under Users Double click the account and click Member Of Remove the IT - Server Team from his account so that he becomes a normal Domain User. Click Yes on the warning message Click OK Logout of the DC1 console and return to the Client machine Back in the Secret Server UI navigate to Administration >> > Users, Roles, Access > Directory Services and click Sync Now to make the changes known to Secret Server This Sync will disable Dennis' account that needs to be reneabled. Navigate to Administration >> > Users, Roles, Access > User Management Switch the Include Disabled to show the disabled users Find DHughes and set the checkbox in front of him. To get the checkbox, hoover over the account Click the Select Bulk Action and select Enable Users When asked to Confirm click OK and Close the Bulk Progress message Test the account To test the effects of Teams, log the current user out of the Secret Server UI Log back is as DHughes in the Thylab domain There is only one secret available, the one created earlier Restricted Servers, with no folders Open the Secret, click Enter Comment and enter some Comment (this due to policies set earlier) Click the RDP Launcher Due to the list and the used Secret Template, the user can only select a server. The possibility of providing a server is not possible Click Launch Now After clicking Connect and Yes the RDP session to the RabbitMQ should be shown Close the session Check the secret back in This concludes this part of the lab","title":"Teams"},{"location":"lab6/lab6/#teams","text":"With Secret Server teams, administrators can create special groups called teams to restrict what users can see. A team bundles users and groups to assign them the same rules as to what other users and sites are visible to them. For example, a managed service provider could isolate their customers from seeing other customer\u2019s user accounts or a large company could \"firewall\" their users by department. Site visibility can also be restricted by teams. The scenario we are solving is that Dennis Hughes and Joe Bloggs, even though they can see all Windows Servers in the Secret Server instance, we want to limit their view on the use of the Server Team - Domain Admin secret to allow only one server. Also they can not have the choice of selecting which Proxy to use for the connection as that might lead into issues for them when they selected the wrong one and more WAN traffic, or even errors might occur. The rest of the IT Admins have to have normal use, not limited by anything. Use the below diagram to understand what is being configured in this lab.","title":"Teams"},{"location":"lab6/lab6/#create-a-team-role","text":"In the Secret Server UI log out from Denis Hughes' account and log back in as ss-admin , navigate to Administration >> > Users, Roles, Access > Roles Create a role named Role - Teams Assigned by clicking Create Role and click on the newly created role. Set the following rights (on the Permissions tab): Add Secret Allow Access Challenge Assign Secret Policy Copy Secret Delete Secret Delete Secrets from Reports Edit Secret Own Secret Personal Folders User Audit Expire Secrets View About View Advanced Dashboard View Advanced Secret Options View Launcher Password View Password Requirements View Secret View Secret Audit View Secret Password and Private Key History Click the X icon in the to be Add Permission navbar","title":"Create a Team Role"},{"location":"lab6/lab6/#create-teams","text":"In the Secret Server UI, navigate to Administration >> > user, Roles, Access > Teams Click Create Team Use the following parameters: Team Name: Thylab domain Team Description: Thylab domain Click Create Team Click the Sites tab and click Edit Check the Should Restrict Sites Under Add Site, select the thylab.lab site (the users available in Secret Server) Click Save Click Members tab and click Edit next to Members Add user Joe Bloggs and Dennis Hughes to the team Click Save","title":"Create Teams"},{"location":"lab6/lab6/#assigning-the-team-role-to-the-users","text":"Navigate to Administration >> > User, Roles, Access > Roles Click Role - Teams Assigned Open the Assingment tab, if you are not on it Click Add Drag thylab.local\\Dennis Hughes and Joe Bloggs from the pane on the right hand side Close the Add Users and Groups panel to \"save\" the changes Click the Roles text in the top of the screen and click the User Role Delete thylab.local\\Dennis Hughes and Joe Bloggs from the pane by hoovering over their names and click the Bin icon","title":"Assigning the Team role to the users"},{"location":"lab6/lab6/#testing-the-set-teams","text":"Log out from the Secret Server UI Log back in as dhughes with the password Thycotic@2022! in the Thylab domain Navigate to Secrets >> > IT Team > IT - Server Team > Thylab Open the Server team - Domain Admin secret Fill out the Comment (as the policy requires this) Run the RDP Launcher Due to the teams restriction only the dropdown box for Enter Computer has been given Click Cancel , Check in the secret and log out of the UI Login as user JBloggs ( Thycotic/4u ) on the Local domain has no access at all. NOTE You will have to change the password of this user Log out Joe Bloggs Log in as user hpatel with password Thycotic@2022! in the Thylab domain has no limitation on using the Server team - Domain Admin Secret other than the dropdown list of the server to connect to. Click Cancel Log out hpatel","title":"Testing the set Teams"},{"location":"lab6/lab6/#change-to-the-existing-list","text":"One of the items that we can manipulate to limit the amount of servers a user can see is using a feature called Lists. These can be used to limit the possibilities for connections. Log in to the Secret Server UI as ss-admin Navigate to Administration >> > Ations > Lists Open the Allowed Domain Servers- Restricted RDP Launcher Remove DC1 and SSPM by clicking the three dots on the right side of the name and click Delete Option, click OK on the warning screen Click Add > Create Option In the Option Name provide RabbitMQ , leave the Parent Category as Uncategorized and click Save Click Save","title":"Change to the existing list"},{"location":"lab6/lab6/#changing-the-secret-template","text":"As the existing secret Server team - Domain Admin secret has been created using a specific Secret Template, changes need to be made. The outcome should be that the people in the IT team can see and use the secret with no limitation. Joe Bloggs and Dennis Hughes (a Junior Admin) should have a limitation to a secret. These changes are: Change the Secret Template that has been used while the Server team - Domain Admin was created Change the Group membership that Dennis Hughes has been assigned to in AD. This has been a mistake. Create a secret that uses the restricted list for its Launcher Log in the Secret Server UI as ss-admin and navigate to Secrets >> > IT Team > IT - Server Team > Thylab Check the Server Team - Domain Admin and click Bul Actions in the bottom of the screen Select Convert Secret Template Select Active Directory Account , in the next screen leave all default. The Allow Servers will be removed Click Create Secret Wait till the Bulk Progress is ready and click Close Click the + sign to create a new Secret Select Active Directory Account (Restricted Launch) Use the following parameters for the secret Secret name: Restricted Servers Domain: thylab.local Username: adm_serverteam2 Password: Thycotic@2022! Notes: Limited Server selection for the user to run the RDP Launcher Allowed Servers: Allowed Domain Servers - Restricted RDP Launcher Site: thylab.local Click Create Secret Provide a comment and click Check Out Secret Click the Sharing tab click Edit Uncheck Inherit Permission from folder and remove all but the ss-admin account Add accounts JBloggs and Dennis Hughes Click Add Make sure both accounts have View rights (default) Click Save Check the secret back in","title":"Changing the Secret Template"},{"location":"lab6/lab6/#changing-dennis-hughes-account","text":"After a few weeks in Dennis has been given the full admin rights on all servers in the domain using Secret Server by putting his account in Active Directory in the IT- Team Server groups. To limit what he can do, his manager decided to take him out of the group and let him start slowly. Login to the DC1 machine with the thylab\\administrator account Open Active Directory Users and Computers and find Dennis Hughes under Users Double click the account and click Member Of Remove the IT - Server Team from his account so that he becomes a normal Domain User. Click Yes on the warning message Click OK Logout of the DC1 console and return to the Client machine Back in the Secret Server UI navigate to Administration >> > Users, Roles, Access > Directory Services and click Sync Now to make the changes known to Secret Server This Sync will disable Dennis' account that needs to be reneabled. Navigate to Administration >> > Users, Roles, Access > User Management Switch the Include Disabled to show the disabled users Find DHughes and set the checkbox in front of him. To get the checkbox, hoover over the account Click the Select Bulk Action and select Enable Users When asked to Confirm click OK and Close the Bulk Progress message","title":"Changing Dennis Hughes account"},{"location":"lab6/lab6/#test-the-account","text":"To test the effects of Teams, log the current user out of the Secret Server UI Log back is as DHughes in the Thylab domain There is only one secret available, the one created earlier Restricted Servers, with no folders Open the Secret, click Enter Comment and enter some Comment (this due to policies set earlier) Click the RDP Launcher Due to the list and the used Secret Template, the user can only select a server. The possibility of providing a server is not possible Click Launch Now After clicking Connect and Yes the RDP session to the RabbitMQ should be shown Close the session Check the secret back in","title":"Test the account"},{"location":"lab7/lab7/","text":"Hooks in secrets In addition to changing the password on check in, secret owners can also specify administrator-created PowerShell scripts, called hooks, to run before or after checkout and check in. These are accessed from the Hooks tab of the secret, which only shows if checkout is enabled and PowerShell scripts have been created by an admin. This part of the lab will go over the following steps 1. Create scripts that we need for the check out/- in hooks 2. Create a helper secret 3. Define Hooks for a secret The scripts that we will create are to enable an Domain account needed to connect to a Windows server on a Check Out action and disble the account on the Check In action. A reason for this might be that the account is to powerfull to be enabled all the time. By disabling the account, a possible attack or unwanted usage can be countered. The account that we are going to use is thylab\\adm_serverteam3 . NOTE This is just an example. As the programming language is going to be PowerShell, much more powerfull routines can be created on Checkou/-In situations Create the scripts While still being on the Client VM, navigate to Administration >> > Actions > Scripts: PowerShell, SQL, SSH Click + Create New Use the following information for the fields: Name: Enable AD User Description: Enabling AD User Category: Password Changing Script: Copy the below snipplet [System.Net.ServicePointManager] :: SecurityProtocol = [System.Net.SecurityProtocolType] :: Tls12 $GetUserStatus = Get-ADUser -Identity $Args [ 0 ] if ( $GetUserStatus . Enabled -eq $false ){ $GetUserStatus | Set-ADUser -Enabled $true } Else { return } Click OK to save the script Click + Create New Use the following information for the fields: Name: Disable AD User Description: Disabling AD User Category: Password Changing Script: Copy the below snipplet [System.Net.ServicePointManager] :: SecurityProtocol = [System.Net.SecurityProtocolType] :: Tls12 $GetUserStatus = Get-ADUser -Identity $Args [ 0 ] if ( $GetUserStatus . Enabled -eq $true ){ $GetUserStatus | Set-ADUser -Enabled $false } Else { return } Click OK to save the script Two scripts should now be shown NOTE To prepare the environment for PowerShell remote executinon, the following steps have been run on the Domain Controller (DC1 -> Domain GPO). PowerShell and Delinea Secret Server . As the DE will run the PowerShell commands, we have installed RSAT on the RabbitMQ server and added the account (thylab\\svc_secretserver) to the Remote Management User group. Create a helper Secret As we are trying to change the password for a member of the Domain Admins group, only a Domain Admin is entitled to do so ( Protected Groups and Security Descriptor Propagator ). Create a new secret for the Domain admin using the following parameters in Secrets >> > TSS Service Accounts : Secret Template: Active Directory Account Secret Name: Domain Admin Domain: thylab Username: administrator Password: Thycotic@2022! Site: Local Create a secret with hooks This part is where we are going to use the scripts and the helper Secret. First we need to create a secret and then we define the hooks that need to be assigned. Lastly we are going to test the secret and the hooks. Create the secret Navigate to Secrets >> > IT - Team > IT - Server team > Thylab Create a new secret with the following parameters: Secret Template: Active Directory Account Secret Name: ADM_ServerTeam3 Domain: thylab Username: adm_serverteam3 Password: Thycotic@2022! Site: Local Click Create Secret Due to the policy, click Comment , provide some comment and click Check Out Open the Remote Password Changing tab and click in the RPC / Autochange section , Edit Check the Privileged Account Credentials and slect the Domain Admin secret Set the Next Password to Randomly Generated Click Save Test the secret Check the Heartbeat status of the secret. If that is Success, your all good to proceed to the next paragraph. Only If not successfull make sure that your solve the issue by: Launch the RDP Launcher and make sure we can login to the DC1 with the Site set to thylab.local using the secret. If the connection fails, open the DC Console, and login using the THYLAB\\Administrator account and reset the adm_serverteam3 password using Active Directory Users and Computers . Make sure the password matches Thycotic@2022! . The account can be found in the DemoAccounts OU. Leave the DC1 console open as we need it in a bit. Check the password in the secret for any typos. Do not proceed before the RDP session works AND the Heartbeat is successfull. If you haven't opened the DC console open it now. Assign the hooks Open the Hooks tab Click Create New Hook In the DropDown box, select under PowerShell ; Enable AD User Click Save Fill out the following parameters in the next screen that pops up: PRE/POST: POST Event Action: Check Out Name: Enable AD User Description: Enable AD User Arguments: $USERNAME Privilgede Account: Domain Admin Click Save Click Create New Hook In the DropDown box, select under PowerShell ; Disable AD User Click Save Fill out the following parameters in the next screen that pops up: PRE/POST: POST Event Action: Check In Name: Disable AD User Description: Disable AD User Arguments: $USERNAME Privilgede Account: Domain Admin Click Save There should now be two hooks available Click the time and select Check in Switch to the DC1 console and open the Active Directory Users and COmputers UI Navigate to thylab.local > DemoAccounts and you should see the adm_serverteam3 account as being disabled (the down pointing arrow) Switch back to the client and open the secret again you just created Enter Enter Comment and click the Checkout Secret Without doing anything, switch back to the DC1 console and refresh the UI The account will no be enabled due to the checkout of the secret Check the secret back in As you have seen in this part of the lab, PowerShell scripts can be used to do some powerfull stuff. In this case it was \"just\" en-/disable an account on Checkout, but there are lots of other things that can be done. Think about a script which creates a firewall change using an API call so the user can login to the SSH server that is behind this firewall. After the secret has been checked-in the change will be reverted. This concludes this part of the lab","title":"Hooks in secrets"},{"location":"lab7/lab7/#hooks-in-secrets","text":"In addition to changing the password on check in, secret owners can also specify administrator-created PowerShell scripts, called hooks, to run before or after checkout and check in. These are accessed from the Hooks tab of the secret, which only shows if checkout is enabled and PowerShell scripts have been created by an admin. This part of the lab will go over the following steps 1. Create scripts that we need for the check out/- in hooks 2. Create a helper secret 3. Define Hooks for a secret The scripts that we will create are to enable an Domain account needed to connect to a Windows server on a Check Out action and disble the account on the Check In action. A reason for this might be that the account is to powerfull to be enabled all the time. By disabling the account, a possible attack or unwanted usage can be countered. The account that we are going to use is thylab\\adm_serverteam3 . NOTE This is just an example. As the programming language is going to be PowerShell, much more powerfull routines can be created on Checkou/-In situations","title":"Hooks in secrets"},{"location":"lab7/lab7/#create-the-scripts","text":"While still being on the Client VM, navigate to Administration >> > Actions > Scripts: PowerShell, SQL, SSH Click + Create New Use the following information for the fields: Name: Enable AD User Description: Enabling AD User Category: Password Changing Script: Copy the below snipplet [System.Net.ServicePointManager] :: SecurityProtocol = [System.Net.SecurityProtocolType] :: Tls12 $GetUserStatus = Get-ADUser -Identity $Args [ 0 ] if ( $GetUserStatus . Enabled -eq $false ){ $GetUserStatus | Set-ADUser -Enabled $true } Else { return } Click OK to save the script Click + Create New Use the following information for the fields: Name: Disable AD User Description: Disabling AD User Category: Password Changing Script: Copy the below snipplet [System.Net.ServicePointManager] :: SecurityProtocol = [System.Net.SecurityProtocolType] :: Tls12 $GetUserStatus = Get-ADUser -Identity $Args [ 0 ] if ( $GetUserStatus . Enabled -eq $true ){ $GetUserStatus | Set-ADUser -Enabled $false } Else { return } Click OK to save the script Two scripts should now be shown NOTE To prepare the environment for PowerShell remote executinon, the following steps have been run on the Domain Controller (DC1 -> Domain GPO). PowerShell and Delinea Secret Server . As the DE will run the PowerShell commands, we have installed RSAT on the RabbitMQ server and added the account (thylab\\svc_secretserver) to the Remote Management User group.","title":"Create the scripts"},{"location":"lab7/lab7/#create-a-helper-secret","text":"As we are trying to change the password for a member of the Domain Admins group, only a Domain Admin is entitled to do so ( Protected Groups and Security Descriptor Propagator ). Create a new secret for the Domain admin using the following parameters in Secrets >> > TSS Service Accounts : Secret Template: Active Directory Account Secret Name: Domain Admin Domain: thylab Username: administrator Password: Thycotic@2022! Site: Local","title":"Create a helper Secret"},{"location":"lab7/lab7/#create-a-secret-with-hooks","text":"This part is where we are going to use the scripts and the helper Secret. First we need to create a secret and then we define the hooks that need to be assigned. Lastly we are going to test the secret and the hooks.","title":"Create a secret with hooks"},{"location":"lab7/lab7/#create-the-secret","text":"Navigate to Secrets >> > IT - Team > IT - Server team > Thylab Create a new secret with the following parameters: Secret Template: Active Directory Account Secret Name: ADM_ServerTeam3 Domain: thylab Username: adm_serverteam3 Password: Thycotic@2022! Site: Local Click Create Secret Due to the policy, click Comment , provide some comment and click Check Out Open the Remote Password Changing tab and click in the RPC / Autochange section , Edit Check the Privileged Account Credentials and slect the Domain Admin secret Set the Next Password to Randomly Generated Click Save","title":"Create the secret"},{"location":"lab7/lab7/#test-the-secret","text":"Check the Heartbeat status of the secret. If that is Success, your all good to proceed to the next paragraph. Only If not successfull make sure that your solve the issue by: Launch the RDP Launcher and make sure we can login to the DC1 with the Site set to thylab.local using the secret. If the connection fails, open the DC Console, and login using the THYLAB\\Administrator account and reset the adm_serverteam3 password using Active Directory Users and Computers . Make sure the password matches Thycotic@2022! . The account can be found in the DemoAccounts OU. Leave the DC1 console open as we need it in a bit. Check the password in the secret for any typos. Do not proceed before the RDP session works AND the Heartbeat is successfull. If you haven't opened the DC console open it now.","title":"Test the secret"},{"location":"lab7/lab7/#assign-the-hooks","text":"Open the Hooks tab Click Create New Hook In the DropDown box, select under PowerShell ; Enable AD User Click Save Fill out the following parameters in the next screen that pops up: PRE/POST: POST Event Action: Check Out Name: Enable AD User Description: Enable AD User Arguments: $USERNAME Privilgede Account: Domain Admin Click Save Click Create New Hook In the DropDown box, select under PowerShell ; Disable AD User Click Save Fill out the following parameters in the next screen that pops up: PRE/POST: POST Event Action: Check In Name: Disable AD User Description: Disable AD User Arguments: $USERNAME Privilgede Account: Domain Admin Click Save There should now be two hooks available Click the time and select Check in Switch to the DC1 console and open the Active Directory Users and COmputers UI Navigate to thylab.local > DemoAccounts and you should see the adm_serverteam3 account as being disabled (the down pointing arrow) Switch back to the client and open the secret again you just created Enter Enter Comment and click the Checkout Secret Without doing anything, switch back to the DC1 console and refresh the UI The account will no be enabled due to the checkout of the secret Check the secret back in As you have seen in this part of the lab, PowerShell scripts can be used to do some powerfull stuff. In this case it was \"just\" en-/disable an account on Checkout, but there are lots of other things that can be done. Think about a script which creates a firewall change using an API call so the user can login to the SSH server that is behind this firewall. After the secret has been checked-in the change will be reverted.","title":"Assign the hooks"},{"location":"lab8/lab8/","text":"Custom Discovery For this part of the lab we are going to Scan for the SQL Server logins that have been defined in the Database that the SSPM server is using. The floowing steps are to be taken: Create a new PowerShell Script Create a new Scan Template Create a new Discovery Scanner that uses the Scan Template and the PowerShell script Run the Discovery scanner Create the PowerShell script While still being on the Client VM, navigate to Administration >> > Actions > Scripts: PowerShell, SQL, SSH Click + Create New Use the following information for the fields: Name: SQL Login Discovery Description: SQL Login Discovery Scanner Category: Discovery Scanner Script: Copy the below snipplet <# .SYNOPSIS Discovery script for finding all SQL Logins on a the target machine .EXAMPLE Expected arguments: $TARGET $[1]$DOMAIN $[1]$USERNAME $[1]$PASSWORD .EXAMPLE Expected arguments: $TARGET $[1]$USERNAME $[1]$PASSWORD Use lines 32/33 or 36/37 based on account type .NOTES Depends upon dbatools module being installed on the Secret Server Web Node or the Distributed Engine Reference: https://www.powershellgallery.com/packages/dbatools/ Tested with version 1.0.107 logPath variable below used for troubleshooting if required, file is written to this path with errors. A file for each server will be created, and overwritten on each run. #> $logPath = 'C:\\scripts' echo $args [ 1 ]+ \"\\\" + $args [ 2 ] $TargetServer = ( $args [ 0 ]. Split ( \".\" ))[ 0 ] $logFile = \"$logPath\\ $( $TargetServer ) _findsqllogins.txt\" Write-Output \"[ $( Get-Date -Format yyyyMMdd ) ] Processing Targeting machine: $TargetServer\" | Out-File $logFile -Force <# Based on credential type of argument #> # Windows Domain with domain name $Username = $args [ 1 ]+ \"\\\" + $args [ 2 ] $Password = $args [ 3 ] # Windows Domain without domain name #$Username = $args[1] #$Password = $args[2] # Using SQL Login Account privileged account # $Username = $params[1] # $Password = $params[2] if ( $Username -and $Password ) { $passwd = $Password | ConvertTo-SecureString -AsPlainText -Force $sqlCred = New-Object System . Management . Automation . PSCredential -ArgumentList $Username , $passwd Write-Output \"[ $( Get-Date -Format yyyyMMdd ) ] Using Privileged Account: $( $sqlCred . Username ) \" | Out-File $logFile -Force } $ProgressPreference = 'SilentlyContinue' if ( -not ( Get-InstalledModule dbatools )) { Write-Output \"[ $( Get-Date -Format yyyyMMdd ) ] dbatools module not found\" | Out-File $logFile -Force throw \"The module dbatools is required for this script. Please run 'Install-Module dbatools' in an elevated session on your Distributed Engine and/or Web Node.\" } else { Import-Module dbatools -Force <# disable dbatools commands attempting to resolve the target name #> $null = Set-DbatoolsConfig -FullName commands . resolve-dbanetworkname . bypass -Value $true } <# Find all the SQL Server instances #> try { <# Depends upong Discovery Account #> $p = @{ ComputerName = $TargetServer ScanType = 'SqlService' EnableException = $true } $sqlEngines = Find-DbaInstance @p Write-Output \"[ $( Get-Date -Format yyyyMMdd ) ] SQL Instances found: $( $sqlEngines . SqlInstance -join ',' ) \" | Out-File $logFile -Force } catch { if ( Test-Path $logPath ) { Write-Output \"[ $( Get-Date -Format yyyyMMdd ) ] Issue finding SQL Instances on $TargetServer - $( $_ . Exception . Message ) \" | Out-File $logFile -Force } else { Write-Output \"[ $( Get-Date -Format yyyyMMdd ) ] Issue finding SQL Instances on $TargetServer - $( $_ . Exception . Message ) \" } throw \"Issue finding SQL instances on $TargetServer - $_\" } if ( $sqlEngines ) { foreach ( $engine in $sqlEngines ) { $sqlInstanceValue = $engine . SqlInstance try { <# Connect to each instance found #> $p = @{ SqlInstance = $sqlInstanceValue SqlCredential = $sqlCred ErrorAction = 'Stop' } try { $cn = Connect-DbaInstance @p Write-Output \"[ $( Get-Date -Format yyyyMMdd ) ] Connected to SQL Server Instance: $sqlInstanceValue\" | Out-File $logFile -Force } catch { if ( Test-Path $logPath ) { Write-Output \"[ $( Get-Date -Format yyyyMMdd ) ] Issue connecting to $sqlInstanceValue - $( $_ . Exception . Message ) \" | Out-File $logFile -Force } else { Write-Output \"[ $( Get-Date -Format yyyyMMdd ) ] Issue connecting to $sqlInstanceValue - $( $_ . Exception . Message ) \" } continue } <# Find the logins on the instance #> $p = @{ SqlInstance = $cn Type = 'SQL' ExcludeFilter = '##*' EnableException = $true } $logins = Get-DbaLogin @p Write-Output \"[ $( Get-Date -Format yyyyMMdd ) ] SQL Server Logins count: $( $logins . Count ) \" | Out-File $logFile -Force } catch { if ( Test-Path $logPath ) { if ( Test-Path $logFile ) { $append = $true } Write-Output \"[ $( Get-Date -Format yyyyMMdd ) ] Issue connecting to $sqlInstanceValue - $( $_ . Exception . Message ) \" | Out-File $logFile -Append : $append } else { Write-Output \"[ $( Get-Date -Format yyyyMMdd ) ] Issue connecting to $sqlInstanceValue - $( $_ . Exception . Message ) \" } continue } <# Output object for Discovery #> foreach ( $login in $logins ) { Write-Output \"[ $( Get-Date -Format yyyyMMdd ) ] SQL Server Login found: $login\" | Out-File $logFile -Force [PSCustomObject] @{ Machine = $login . Parent . Name Username = $login . Name } } return [PSCustomObject] } } 2. Click Ok Create a new scan template Navigate to Adminitration >> >Actions > Discovery Open the Configuration tab Click Discovery Configuration Options > Extensible Discovery Click in the Scan Templates Configure Scan Templates and open the Accounts tab Click + Create New Scan Template Use the following parameters for the new screen that appears: Name: SQL Logins Scan Type: no change Parent Scan Template: no change FIELD NAME Fill out the following Machine Username The configuration should look like the below screenshot: Click Save Create a new Discovery scanner Navigate to Adminitration >> >Actions > Discovery Open the Configuration tab Click Discovery Configuration Options > Extensible Discovery In the Discovery Scanners section click Configure Discovery Scanners Click the Accounts tab and click + Create New Scanner Provide the following parameters for the new scanner Name: SQL Login Discovery Scanner Description: SQL Login Discovery Scanner Active: Checked Discovery Type: Find Local Accounts Base Scanner: PowerShell Discovery Allow OU Input: unchecked Input Template: Windows Computer Output Template: SQL Login Script: SQL Login Discovery Script Arguments: $target $[1]$Domain $[1]$Username $[1]$Password Click Ok Run the new Discovery Scanner Now that we have paved the way, we need to tell the Discovery Scanner to also run the new Scanner. Navigate to Administration >> > Discovery Click the thylab.local domain and click Scanner Settings In the FIND ACCOUNTS section, click +Add New Account Scanner Click on the + symbol to add the scanner Click OK The new scanner should be mentioned in the list of FIND ACCOUNTS Click the BACK button the return back to the domain In the top of the screen, click Admin > Discovery Click Run Discovery Now > Run Computer Scan to run the scanner including the SQL Scanner Wait till the Computer Scan has ended. It should read Just Now Click on Discovery Network View In the new window, make sure you have Local Accounts selected and click Computers in the thylab.local domain In the Line that shows SSPM you will see the sa account and SQL Login as the scan template Click Back to return back to the Discovery overview Remark Using this method, Extensible (custom) Discovery, anything that can be \"discovered\" by using a PowerShell script, can be created for resources which are not available Out-Off-The-Box. To read more on Extensible (Custom) Discovery, including some examples, can be found here . This concludes this part of the lab","title":"Custom Discovery"},{"location":"lab8/lab8/#custom-discovery","text":"For this part of the lab we are going to Scan for the SQL Server logins that have been defined in the Database that the SSPM server is using. The floowing steps are to be taken: Create a new PowerShell Script Create a new Scan Template Create a new Discovery Scanner that uses the Scan Template and the PowerShell script Run the Discovery scanner","title":"Custom Discovery"},{"location":"lab8/lab8/#create-the-powershell-script","text":"While still being on the Client VM, navigate to Administration >> > Actions > Scripts: PowerShell, SQL, SSH Click + Create New Use the following information for the fields: Name: SQL Login Discovery Description: SQL Login Discovery Scanner Category: Discovery Scanner Script: Copy the below snipplet <# .SYNOPSIS Discovery script for finding all SQL Logins on a the target machine .EXAMPLE Expected arguments: $TARGET $[1]$DOMAIN $[1]$USERNAME $[1]$PASSWORD .EXAMPLE Expected arguments: $TARGET $[1]$USERNAME $[1]$PASSWORD Use lines 32/33 or 36/37 based on account type .NOTES Depends upon dbatools module being installed on the Secret Server Web Node or the Distributed Engine Reference: https://www.powershellgallery.com/packages/dbatools/ Tested with version 1.0.107 logPath variable below used for troubleshooting if required, file is written to this path with errors. A file for each server will be created, and overwritten on each run. #> $logPath = 'C:\\scripts' echo $args [ 1 ]+ \"\\\" + $args [ 2 ] $TargetServer = ( $args [ 0 ]. Split ( \".\" ))[ 0 ] $logFile = \"$logPath\\ $( $TargetServer ) _findsqllogins.txt\" Write-Output \"[ $( Get-Date -Format yyyyMMdd ) ] Processing Targeting machine: $TargetServer\" | Out-File $logFile -Force <# Based on credential type of argument #> # Windows Domain with domain name $Username = $args [ 1 ]+ \"\\\" + $args [ 2 ] $Password = $args [ 3 ] # Windows Domain without domain name #$Username = $args[1] #$Password = $args[2] # Using SQL Login Account privileged account # $Username = $params[1] # $Password = $params[2] if ( $Username -and $Password ) { $passwd = $Password | ConvertTo-SecureString -AsPlainText -Force $sqlCred = New-Object System . Management . Automation . PSCredential -ArgumentList $Username , $passwd Write-Output \"[ $( Get-Date -Format yyyyMMdd ) ] Using Privileged Account: $( $sqlCred . Username ) \" | Out-File $logFile -Force } $ProgressPreference = 'SilentlyContinue' if ( -not ( Get-InstalledModule dbatools )) { Write-Output \"[ $( Get-Date -Format yyyyMMdd ) ] dbatools module not found\" | Out-File $logFile -Force throw \"The module dbatools is required for this script. Please run 'Install-Module dbatools' in an elevated session on your Distributed Engine and/or Web Node.\" } else { Import-Module dbatools -Force <# disable dbatools commands attempting to resolve the target name #> $null = Set-DbatoolsConfig -FullName commands . resolve-dbanetworkname . bypass -Value $true } <# Find all the SQL Server instances #> try { <# Depends upong Discovery Account #> $p = @{ ComputerName = $TargetServer ScanType = 'SqlService' EnableException = $true } $sqlEngines = Find-DbaInstance @p Write-Output \"[ $( Get-Date -Format yyyyMMdd ) ] SQL Instances found: $( $sqlEngines . SqlInstance -join ',' ) \" | Out-File $logFile -Force } catch { if ( Test-Path $logPath ) { Write-Output \"[ $( Get-Date -Format yyyyMMdd ) ] Issue finding SQL Instances on $TargetServer - $( $_ . Exception . Message ) \" | Out-File $logFile -Force } else { Write-Output \"[ $( Get-Date -Format yyyyMMdd ) ] Issue finding SQL Instances on $TargetServer - $( $_ . Exception . Message ) \" } throw \"Issue finding SQL instances on $TargetServer - $_\" } if ( $sqlEngines ) { foreach ( $engine in $sqlEngines ) { $sqlInstanceValue = $engine . SqlInstance try { <# Connect to each instance found #> $p = @{ SqlInstance = $sqlInstanceValue SqlCredential = $sqlCred ErrorAction = 'Stop' } try { $cn = Connect-DbaInstance @p Write-Output \"[ $( Get-Date -Format yyyyMMdd ) ] Connected to SQL Server Instance: $sqlInstanceValue\" | Out-File $logFile -Force } catch { if ( Test-Path $logPath ) { Write-Output \"[ $( Get-Date -Format yyyyMMdd ) ] Issue connecting to $sqlInstanceValue - $( $_ . Exception . Message ) \" | Out-File $logFile -Force } else { Write-Output \"[ $( Get-Date -Format yyyyMMdd ) ] Issue connecting to $sqlInstanceValue - $( $_ . Exception . Message ) \" } continue } <# Find the logins on the instance #> $p = @{ SqlInstance = $cn Type = 'SQL' ExcludeFilter = '##*' EnableException = $true } $logins = Get-DbaLogin @p Write-Output \"[ $( Get-Date -Format yyyyMMdd ) ] SQL Server Logins count: $( $logins . Count ) \" | Out-File $logFile -Force } catch { if ( Test-Path $logPath ) { if ( Test-Path $logFile ) { $append = $true } Write-Output \"[ $( Get-Date -Format yyyyMMdd ) ] Issue connecting to $sqlInstanceValue - $( $_ . Exception . Message ) \" | Out-File $logFile -Append : $append } else { Write-Output \"[ $( Get-Date -Format yyyyMMdd ) ] Issue connecting to $sqlInstanceValue - $( $_ . Exception . Message ) \" } continue } <# Output object for Discovery #> foreach ( $login in $logins ) { Write-Output \"[ $( Get-Date -Format yyyyMMdd ) ] SQL Server Login found: $login\" | Out-File $logFile -Force [PSCustomObject] @{ Machine = $login . Parent . Name Username = $login . Name } } return [PSCustomObject] } } 2. Click Ok","title":"Create the PowerShell script"},{"location":"lab8/lab8/#create-a-new-scan-template","text":"Navigate to Adminitration >> >Actions > Discovery Open the Configuration tab Click Discovery Configuration Options > Extensible Discovery Click in the Scan Templates Configure Scan Templates and open the Accounts tab Click + Create New Scan Template Use the following parameters for the new screen that appears: Name: SQL Logins Scan Type: no change Parent Scan Template: no change FIELD NAME Fill out the following Machine Username The configuration should look like the below screenshot: Click Save","title":"Create a new scan template"},{"location":"lab8/lab8/#create-a-new-discovery-scanner","text":"Navigate to Adminitration >> >Actions > Discovery Open the Configuration tab Click Discovery Configuration Options > Extensible Discovery In the Discovery Scanners section click Configure Discovery Scanners Click the Accounts tab and click + Create New Scanner Provide the following parameters for the new scanner Name: SQL Login Discovery Scanner Description: SQL Login Discovery Scanner Active: Checked Discovery Type: Find Local Accounts Base Scanner: PowerShell Discovery Allow OU Input: unchecked Input Template: Windows Computer Output Template: SQL Login Script: SQL Login Discovery Script Arguments: $target $[1]$Domain $[1]$Username $[1]$Password Click Ok","title":"Create a new Discovery scanner"},{"location":"lab8/lab8/#run-the-new-discovery-scanner","text":"Now that we have paved the way, we need to tell the Discovery Scanner to also run the new Scanner. Navigate to Administration >> > Discovery Click the thylab.local domain and click Scanner Settings In the FIND ACCOUNTS section, click +Add New Account Scanner Click on the + symbol to add the scanner Click OK The new scanner should be mentioned in the list of FIND ACCOUNTS Click the BACK button the return back to the domain In the top of the screen, click Admin > Discovery Click Run Discovery Now > Run Computer Scan to run the scanner including the SQL Scanner Wait till the Computer Scan has ended. It should read Just Now Click on Discovery Network View In the new window, make sure you have Local Accounts selected and click Computers in the thylab.local domain In the Line that shows SSPM you will see the sa account and SQL Login as the scan template Click Back to return back to the Discovery overview Remark Using this method, Extensible (custom) Discovery, anything that can be \"discovered\" by using a PowerShell script, can be created for resources which are not available Out-Off-The-Box. To read more on Extensible (Custom) Discovery, including some examples, can be found here .","title":"Run the new Discovery Scanner"},{"location":"lab9/lab9/","text":"Custom Remote Password Changer Secret Server has already the most common password changers built-in. In some cases the available password changers are not enough and a custom one has to be created. This lab will show the process of creating such a custom Remote Password Changer (RPC) for the VyOS router that is conncting the two domain and the internet together. The following steps will be explained: Create a RPC Create a new Secret Templates and use the RPC Create a new secret with the newly created Secret Template Create a RPC Navigate go Administration >> > Actions > Remote Password Changing Configuration Click Configure Password Changers Scroll all the way down and clik + New As Base Password Changer slect Unix Account Custom (SSH) and name it VyOS router Click Save In the new screen in the Password Change Commands use the following parameters ( leave all settings default unless told otherwise!!! ): Remove all current Commands by clicking the delete icon (metal bin) - Use the following commands (add new by clicking the + symbol at the end of the command): Command Comment Pause configure Open configuration mode 2000 set system login user \\$USERNAME authentication plaintext-password \\$NEWPASSWORD Set the new password 2000 commit Commit the change 2000 save Save the change 2000 exit Leave the config mode 2000 The configuration should look like the below screenshot Click Back In the new screen, Click the left Test Action button to check that we can use the connection with some paramters. Use the following parameters: Username: vyos Password: Thycotic@2022! MACHINE: vyos.thylab.local Leave the rest of the fields default Click OK . This will run the test and should return Password Verify was Successful Click the right Test Action button to check the commands provided to change the password Use the following parameters in the fields: Username: vyos Password: Thycotic@2022! MACHINE: vyos.thylab.local $USERNAME: vyos $NEWPASSWORD: Delinea/4u Leave the rest of the fields default Click OK to test the built RPC. After a few seconds you will receive Console Output message in green meaning this test was successful Click the left Test Action button again to check that we can use the connection with the new password. Use the following parameters: Username: vyos Password: Delinea/4u MACHINE: vyos.thylab.local Leave the rest of the fields default This should result in a successful Password verify Rerun the right Test Action button and set the password back to Thycotic@2022! so we are back at the beginning situation.As the RPC is now working Now that the RPC is working, the next step is to create anew Secret Template that is going to be used for the secret for the VyOS router Create a Secret Template and use the RPC Navigate to Administration >> > Actions > Secret Templates Click Create Template and use the Name VyOS - Custom RPC Click Save In the new screen click the Fields tab and click Add Field Use the following parameters: Name: Username Field Slug Name: Auto populated Description: Username Data Type: Text Click Save Repeat steps 4 til 6 and use the following parameters Name Field Slug Name Description Data Type Password password Password Password Machine machine Machine name Text The fields definition should look like the below screenshot Click the Mapping tab and click Edit Enable RPC by setting the checkbox Set the following parameters: Password Type to use: VyOS router (the name of the created RPC) Machine Name: Machine Password: Password User Name: Username Click Save Click Add Mapping to add a launcher to the Template Select PuTTY in the mapping type and map the fields to the required information (Port; use default and set 22) Click Save Now that we have the RCP assigned to a newly created Secret Template it is time to create the secret for the VyOS Router Create the secret Navigate to Secrets >> > IT Team > IT - Server Team > Thylab Create a new secret from the new Secret Template named VyOS - Custom RPC Name the new secret VyOS - Router - Custom RPC Fill out the rest of the fields using the known information. The secret should look like the below screenshot Click Create Secret As there is a policy on the folder, click Enter Comment , give some information and click Check Out Secret to open the secret Run the PuTTY Launcher to check we can connect to the VyOS router. THis will open a SSH session and the console shold be shown. Close the session by using <CTRL>+d Click the EYE icon next to the password to see the password and try to remember it. The policy has stated that on Check in the password MUST be changed. Click the Time left and click Check In this will trigger a password reset and wait approx. 30 seconds before proceeding. The RPC needs 20 seconds to run ( 2000ms per command as stated in the RPC Pause ). Note If you don't wait the 30 seconds, a message is shown that there is a pending password change . After this has run successfully, you will be forced to do a Check Out again! Open the secret again, click Enter Comment , give some information and click Check Out Secret Click the EYE icon next to the password to see the new password that has been set. Run the PuTTY Launcher to make sure it works using the new password. This will open the console to the VyOS router as shown earlier, but now using the new password. As you have found, it is relatively easy to create your own RPCs. Especially in situation where the default, or OOTB, RPCs are not enough this can come in handy... This concludes this part of the lab","title":"Custom Remote Password Changer"},{"location":"lab9/lab9/#custom-remote-password-changer","text":"Secret Server has already the most common password changers built-in. In some cases the available password changers are not enough and a custom one has to be created. This lab will show the process of creating such a custom Remote Password Changer (RPC) for the VyOS router that is conncting the two domain and the internet together. The following steps will be explained: Create a RPC Create a new Secret Templates and use the RPC Create a new secret with the newly created Secret Template","title":"Custom Remote Password Changer"},{"location":"lab9/lab9/#create-a-rpc","text":"Navigate go Administration >> > Actions > Remote Password Changing Configuration Click Configure Password Changers Scroll all the way down and clik + New As Base Password Changer slect Unix Account Custom (SSH) and name it VyOS router Click Save In the new screen in the Password Change Commands use the following parameters ( leave all settings default unless told otherwise!!! ): Remove all current Commands by clicking the delete icon (metal bin) - Use the following commands (add new by clicking the + symbol at the end of the command): Command Comment Pause configure Open configuration mode 2000 set system login user \\$USERNAME authentication plaintext-password \\$NEWPASSWORD Set the new password 2000 commit Commit the change 2000 save Save the change 2000 exit Leave the config mode 2000 The configuration should look like the below screenshot Click Back In the new screen, Click the left Test Action button to check that we can use the connection with some paramters. Use the following parameters: Username: vyos Password: Thycotic@2022! MACHINE: vyos.thylab.local Leave the rest of the fields default Click OK . This will run the test and should return Password Verify was Successful Click the right Test Action button to check the commands provided to change the password Use the following parameters in the fields: Username: vyos Password: Thycotic@2022! MACHINE: vyos.thylab.local $USERNAME: vyos $NEWPASSWORD: Delinea/4u Leave the rest of the fields default Click OK to test the built RPC. After a few seconds you will receive Console Output message in green meaning this test was successful Click the left Test Action button again to check that we can use the connection with the new password. Use the following parameters: Username: vyos Password: Delinea/4u MACHINE: vyos.thylab.local Leave the rest of the fields default This should result in a successful Password verify Rerun the right Test Action button and set the password back to Thycotic@2022! so we are back at the beginning situation.As the RPC is now working Now that the RPC is working, the next step is to create anew Secret Template that is going to be used for the secret for the VyOS router","title":"Create a RPC"},{"location":"lab9/lab9/#create-a-secret-template-and-use-the-rpc","text":"Navigate to Administration >> > Actions > Secret Templates Click Create Template and use the Name VyOS - Custom RPC Click Save In the new screen click the Fields tab and click Add Field Use the following parameters: Name: Username Field Slug Name: Auto populated Description: Username Data Type: Text Click Save Repeat steps 4 til 6 and use the following parameters Name Field Slug Name Description Data Type Password password Password Password Machine machine Machine name Text The fields definition should look like the below screenshot Click the Mapping tab and click Edit Enable RPC by setting the checkbox Set the following parameters: Password Type to use: VyOS router (the name of the created RPC) Machine Name: Machine Password: Password User Name: Username Click Save Click Add Mapping to add a launcher to the Template Select PuTTY in the mapping type and map the fields to the required information (Port; use default and set 22) Click Save Now that we have the RCP assigned to a newly created Secret Template it is time to create the secret for the VyOS Router","title":"Create a Secret Template and use the RPC"},{"location":"lab9/lab9/#create-the-secret","text":"Navigate to Secrets >> > IT Team > IT - Server Team > Thylab Create a new secret from the new Secret Template named VyOS - Custom RPC Name the new secret VyOS - Router - Custom RPC Fill out the rest of the fields using the known information. The secret should look like the below screenshot Click Create Secret As there is a policy on the folder, click Enter Comment , give some information and click Check Out Secret to open the secret Run the PuTTY Launcher to check we can connect to the VyOS router. THis will open a SSH session and the console shold be shown. Close the session by using <CTRL>+d Click the EYE icon next to the password to see the password and try to remember it. The policy has stated that on Check in the password MUST be changed. Click the Time left and click Check In this will trigger a password reset and wait approx. 30 seconds before proceeding. The RPC needs 20 seconds to run ( 2000ms per command as stated in the RPC Pause ). Note If you don't wait the 30 seconds, a message is shown that there is a pending password change . After this has run successfully, you will be forced to do a Check Out again! Open the secret again, click Enter Comment , give some information and click Check Out Secret Click the EYE icon next to the password to see the new password that has been set. Run the PuTTY Launcher to make sure it works using the new password. This will open the console to the VyOS router as shown earlier, but now using the new password. As you have found, it is relatively easy to create your own RPCs. Especially in situation where the default, or OOTB, RPCs are not enough this can come in handy...","title":"Create the secret"}]}